syntax = "proto3";
package konstellation.issue;

option go_package = "x/issue/types";

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "konstellation/issue/allowance.proto";
import "konstellation/issue/freeze.proto";
import "konstellation/issue/issue.proto";
import "konstellation/issue/querier.proto";
import "konstellation/issue/params.proto";
import "konstellation/issue/coin.proto";

service Query {
  rpc QueryAllowance(QueryAllowanceRequest) returns (QueryAllowanceResponse) {
    option (google.api.http).get = "/konstellation/issue/allowance/{owner}/{spender}/{denom}";
  }
  rpc QueryAllowances(QueryAllowancesRequest) returns (QueryAllowancesResponse) {
    option (google.api.http).get = "/konstellation/issue/allowances/{owner}/{denom}";
  }
  rpc QueryFreeze(QueryFreezeRequest) returns (QueryFreezeResponse) {
    option (google.api.http).get = "/konstellation/issue/freeze/{holder}/{denom}";
  }
  rpc QueryFreezes(QueryFreezesRequest) returns (QueryFreezesResponse) {
    option (google.api.http).get = "/konstellation/issue/freezes/{denom}";
  }
  rpc QueryIssue(QueryIssueRequest) returns (QueryIssueResponse) {
    option (google.api.http).get = "/konstellation/issue/issue/{denom}";
  }
  rpc QueryAllIssues(QueryAllIssuesRequest) returns (QueryAllIssuesResponse) {
    option (google.api.http).get = "/konstellation/issue/issues/all";
  }
  rpc QueryIssues(QueryIssuesRequest) returns (QueryIssuesResponse) {
    option (google.api.http).get = "/konstellation/issue/issues";
  }
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/konstellation/issue/params";
  }
}

message QueryAllowanceRequest {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string spender = 2 [(gogoproto.moretags) = "yaml:\"spender\""];
  string denom = 3;
}

message QueryAllowanceResponse {
  Coins allowance = 1;
}

message QueryAllowancesRequest {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
}

message QueryAllowancesResponse {
  repeated Allowance allowances = 1;
}

message QueryFreezeRequest {
  string denom = 1;
  string holder = 2 [(gogoproto.moretags) = "yaml:\"holder\""];
}

message QueryFreezeResponse {
  Freeze freeze = 1;
}

message QueryFreezesRequest {
  string denom = 1;
}

message QueryFreezesResponse {
  repeated AddressFreeze freezes = 1;
}

message QueryIssueRequest {
  string denom = 1;
}

message QueryIssueResponse {
  CoinIssue issue = 1;
}

message QueryAllIssuesRequest {}

message QueryAllIssuesResponse {
  repeated CoinIssue issues = 1;
}

message QueryIssuesRequest {
  IssuesParams params = 1;
}

message QueryIssuesResponse {
  repeated CoinIssue issues = 1;
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1;
}