syntax = "proto3";
package konstellation.issue;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "issue/params.proto";
import "issue/coin_issue.proto";
import "issue/freeze.proto";
import "issue/allowance.proto";

option go_package = "x/issue/types";

// Query defines the gRPC querier service.
service Query {
  // this line is used by starport scaffolding # 2

  // Queries a issues that sender owns.
  rpc Issues(QueryIssuesRequest) returns (QueryIssuesResponse) {
    option (google.api.http).get = "/konstellation/issue/issues";
  }
  // Queries all issues.
  rpc IssuesAll(QueryAllIssuesRequest) returns (QueryAllIssuesResponse) {
    option (google.api.http).get = "/konstellation/issue/issues/all";
  }

  // Queries a issue by denom
  rpc Issue(QueryIssueRequest) returns (QueryIssueResponse) {
    option (google.api.http).get = "/konstellation/issue/issue/{denom}";
  }

  // Queries a allowance by denom and spender.
  rpc Allowance(QueryAllowanceRequest) returns (QueryAllowanceResponse) {
    option (google.api.http).get = "/konstellation/issue/allowance/{owner}/{spender}/{denom}";
  }

  // Queries allowance of a given denom for a sender
  rpc Allowances(QueryAllowancesRequest) returns (QueryAllowancesResponse) {
    option (google.api.http).get = "/konstellation/issue/allowance/{owner}/{denom}";
  }

  // Queries a freeze by denom .
  rpc Freeze(QueryFreezeRequest) returns (QueryFreezeResponse) {
    option (google.api.http).get = "/konstellation/issue/freeze/{holder}/{denom}";
  }

  // Queries a list of freeze items.
  rpc Freezes(QueryFreezesRequest) returns (QueryFreezesResponse) {
    option (google.api.http).get = "/konstellation/issue/freezes/{holder}";
  }

  // Queries a list of freezes items.
  rpc FreezesAll(QueryAllFreezesRequest) returns (QueryAllFreezesResponse) {
    option (google.api.http).get = "/konstellation/issue/freezes/all/{denom}";
  }

  // Queries a list of params items.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/konstellation/issue/params";
  }
}


message QueryIssueRequest {
  string denom = 1;
}

message QueryIssueResponse {
  CoinIssue issue = 1;
}

message QueryIssuesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string owner = 2;
}

message QueryIssuesResponse {
  repeated CoinIssue issues = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllIssuesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllIssuesResponse {
  repeated CoinIssue issues = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllowanceRequest {
  string owner = 1;
  string spender = 2;
  string denom = 3;
}

message QueryAllowanceResponse {
  Allowance Allowance = 1;
}

message QueryAllowancesRequest {
  string owner = 1;
  string denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryAllowancesResponse {
  repeated Allowance allowances = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryFreezeRequest {
  string denom = 1;
  string holder = 2;
}

message QueryFreezeResponse {
  Freeze Freeze = 1;
}

message QueryFreezesRequest {
  string holder = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryFreezesResponse {
  repeated Freeze freezes = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllFreezesRequest {
  string denom = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllFreezesResponse {
  repeated Freeze freezes = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryParamsRequest {
}

message QueryParamsResponse {
  Params params = 1;
}