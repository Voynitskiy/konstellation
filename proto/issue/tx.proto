syntax = "proto3";

package konstellation.issue;

import "gogoproto/gogo.proto";
import "issue/issue_features.proto";
import "issue/coin_issue.proto";
import "issue/issue_params.proto";

import "google/api/annotations.proto";
// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";

option go_package = "x/issue/types";

// Msg defines the Msg service.
service Msg {
  rpc Issue(MsgIssue) returns (MsgIssueResponse) {
    option (google.api.http).put = "/konstellation/issue/issue";
  }
  rpc TransferOwnership(MsgTransferOwnership) returns (MsgTransferOwnershipResponse) {
    option (google.api.http).post = "/konstellation/issue/transfer_ownership";
  }
  rpc Transfer(MsgTransfer) returns (MsgTransferResponse) {
    option (google.api.http).put = "/konstellation/issue/transfer";
  }
  rpc Approve(MsgApprove) returns (MsgApproveResponse) {
    option (google.api.http).put = "/konstellation/issue/approve";
  }
  rpc IncreaseAllowance(MsgIncreaseAllowance) returns (MsgIncreaseAllowanceResponse) {
    option (google.api.http).put = "/konstellation/issue/increase_allowance";
  }
  rpc DecreaseAllowance(MsgDecreaseAllowance) returns (MsgDecreaseAllowanceResponse) {
    option (google.api.http).put = "/konstellation/issue/decrease_allowance";
  }
  rpc TransferFrom(MsgTransferFrom) returns (MsgTransferFromResponse) {
    option (google.api.http).put = "/konstellation/issue/transfer_from";
  }
  rpc Mint(MsgMint) returns (MsgMintResponse) {
    option (google.api.http).put = "/konstellation/issue/mint";
  }
  rpc Burn(MsgBurn) returns (MsgBurnResponse) {
    option (google.api.http).put = "/konstellation/issue/burn";
  }
  rpc BurnFrom(MsgBurnFrom) returns (MsgBurnFromResponse) {
    option (google.api.http).put = "/konstellation/issue/burn_from";
  }
  rpc Freeze(MsgFreeze) returns (MsgFreezeResponse) {
    option (google.api.http).put = "/konstellation/issue/freeze";
  }
  rpc Unfreeze(MsgUnfreeze) returns (MsgUnfreezeResponse) {
    option (google.api.http).put = "/konstellation/issue/unfreeze";
  }
  rpc Features(MsgFeatures) returns (MsgFeaturesResponse) {
    option (google.api.http).put = "/konstellation/issue/features";
  }
  rpc EnableFeature(MsgEnableFeature) returns (MsgEnableFeatureResponse) {
    option (google.api.http).put = "/konstellation/issue/enable_feature";
  }
  rpc DisableFeature(MsgDisableFeature) returns (MsgDisableFeatureResponse) {
    option (google.api.http).put = "/konstellation/issue/disable_feature";
  }
  rpc Description(MsgDescription) returns (MsgDescriptionResponse) {
    option (google.api.http).post = "/konstellation/issue/description";
  }
}

message MsgFreeze {
  string freezer = 1 [(gogoproto.moretags) = "yaml:\"freezer\""];
  string holder = 2 [(gogoproto.moretags) = "yaml:\"holder\""];
  string denom = 3;
  string op = 4;
}

message MsgFreezeResponse {
}


// this line is used by starport scaffolding # proto/tx/message
message MsgUnfreeze {
  string freezer = 1 [(gogoproto.moretags) = "yaml:\"freezer\""];
  string holder = 2 [(gogoproto.moretags) = "yaml:\"holder\""];
  string denom = 3;
  string op = 4;
}

message MsgUnfreezeResponse {
}

message MsgBurnFrom {
  string burner = 1 [(gogoproto.moretags) = "yaml:\"burner\""];
  string from_address = 2 [(gogoproto.moretags) = "yaml:\"from_address\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgBurnFromResponse {
}

message MsgBurn {
  string burner = 1 [(gogoproto.moretags) = "yaml:\"burner\""];
  repeated cosmos.base.v1beta1.Coin amount = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgBurnResponse {
}

message MsgMint {
  string minter = 1 [(gogoproto.moretags) = "yaml:\"minter\""];
  string to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgMintResponse {
}

message MsgDecreaseAllowance {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string spender = 2 [(gogoproto.moretags) = "yaml:\"spender\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgDecreaseAllowanceResponse {
}

message MsgIncreaseAllowance {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string spender = 2 [(gogoproto.moretags) = "yaml:\"spender\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgIncreaseAllowanceResponse {
}

message MsgApprove {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string spender = 2 [(gogoproto.moretags) = "yaml:\"spender\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgApproveResponse {
}

message MsgTransferOwnership {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
  string to_address = 3 [(gogoproto.moretags) = "yaml:\"to_address\""];
}

message MsgTransferOwnershipResponse {
}

message MsgTransferFrom {
  string sender = 1 [(gogoproto.moretags) = "yaml:\"sender\""];
  string from_address = 2 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string to_address = 3 [(gogoproto.moretags) = "yaml:\"to_address\""];
  repeated cosmos.base.v1beta1.Coin amount = 4
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgTransferFromResponse {
}

message MsgTransfer {
  string from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
  string to_address = 2 [(gogoproto.moretags) = "yaml:\"to_address\""];
  repeated cosmos.base.v1beta1.Coin amount = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgTransferResponse {
}

message MsgFeatures {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
  IssueFeatures issue_features = 3 [(gogoproto.embed) = true];
}

message MsgFeaturesResponse {
}

message MsgEnableFeature {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
  string feature = 3;
}

message MsgEnableFeatureResponse {
}

message MsgDisableFeature {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
  string feature = 3;
}

message MsgDisableFeatureResponse {
}

message MsgDescription {
  string owner = 1 [(gogoproto.moretags) = "yaml:\"owner\""];
  string denom = 2;
  string description = 3;
}

message MsgDescriptionResponse {
}

message MsgIssue {
  string owner = 1;
  string issuer = 2;
  IssueParams params = 3 [(gogoproto.embed) = true];
}

message MsgIssueResponse {
  CoinIssue issue = 1;
}
