// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue/issue_params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IssueParams struct {
	Denom          string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Symbol         string                                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalSupply    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_supply,json=totalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_supply"`
	Decimals       uint32                                 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Description    string                                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	*IssueFeatures `protobuf:"bytes,6,opt,name=features,proto3,embedded=features" json:"features,omitempty"`
}

func (m *IssueParams) Reset()         { *m = IssueParams{} }
func (m *IssueParams) String() string { return proto.CompactTextString(m) }
func (*IssueParams) ProtoMessage()    {}
func (*IssueParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba653ff2edf64ed9, []int{0}
}
func (m *IssueParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueParams.Merge(m, src)
}
func (m *IssueParams) XXX_Size() int {
	return m.Size()
}
func (m *IssueParams) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueParams.DiscardUnknown(m)
}

var xxx_messageInfo_IssueParams proto.InternalMessageInfo

func (m *IssueParams) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IssueParams) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *IssueParams) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *IssueParams) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*IssueParams)(nil), "konstellation.issue.IssueParams")
}

func init() { proto.RegisterFile("issue/issue_params.proto", fileDescriptor_ba653ff2edf64ed9) }

var fileDescriptor_ba653ff2edf64ed9 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xb1, 0x4e, 0xf3, 0x30,
	0x18, 0x8c, 0xfb, 0xb7, 0x55, 0x7f, 0x87, 0x2e, 0xa6, 0x42, 0x56, 0x86, 0x34, 0xea, 0x00, 0x5d,
	0x70, 0x24, 0x78, 0x83, 0x0a, 0x21, 0x75, 0x83, 0xb0, 0xb1, 0x54, 0x69, 0x62, 0x4a, 0xd4, 0x24,
	0x9f, 0x95, 0xcf, 0x91, 0xe8, 0x5b, 0x20, 0x9e, 0xaa, 0x63, 0x47, 0xc4, 0x50, 0xa1, 0xe6, 0x45,
	0x50, 0x9c, 0x50, 0x75, 0x60, 0xb1, 0x7d, 0xdf, 0x9d, 0x4f, 0xdf, 0x1d, 0xe5, 0x09, 0x62, 0x29,
	0x7d, 0x73, 0x2e, 0x54, 0x58, 0x84, 0x19, 0x0a, 0x55, 0x80, 0x06, 0x76, 0xbe, 0x86, 0x1c, 0xb5,
	0x4c, 0xd3, 0x50, 0x27, 0x90, 0x0b, 0xa3, 0x70, 0x46, 0x2b, 0x58, 0x81, 0xe1, 0xfd, 0xfa, 0xd5,
	0x48, 0x1d, 0xe7, 0xd4, 0xe4, 0x45, 0x86, 0xba, 0x2c, 0x64, 0x6b, 0x33, 0xf9, 0xe8, 0x50, 0x7b,
	0x5e, 0x13, 0x0f, 0xc6, 0x9c, 0x8d, 0x68, 0x2f, 0x96, 0x39, 0x64, 0x9c, 0x78, 0x64, 0xfa, 0x3f,
	0x68, 0x00, 0xbb, 0xa0, 0x7d, 0xdc, 0x64, 0x4b, 0x48, 0x79, 0xc7, 0x8c, 0x5b, 0xc4, 0x1e, 0xe9,
	0x99, 0x06, 0x1d, 0xa6, 0x0b, 0x2c, 0x95, 0x4a, 0x37, 0xfc, 0x5f, 0xcd, 0xce, 0xc4, 0x76, 0x3f,
	0xb6, 0xbe, 0xf6, 0xe3, 0xcb, 0x55, 0xa2, 0x5f, 0xcb, 0xa5, 0x88, 0x20, 0xf3, 0x23, 0xc0, 0x0c,
	0xb0, 0xbd, 0xae, 0x31, 0x5e, 0xfb, 0x7a, 0xa3, 0x24, 0x8a, 0x79, 0xae, 0x03, 0xdb, 0x78, 0x3c,
	0x19, 0x0b, 0xe6, 0xd0, 0x41, 0x2c, 0xa3, 0x24, 0x0b, 0x53, 0xe4, 0x5d, 0x8f, 0x4c, 0x87, 0xc1,
	0x11, 0x33, 0x8f, 0xda, 0xb1, 0xc4, 0xa8, 0x48, 0x54, 0x9d, 0x99, 0xf7, 0xcc, 0x2e, 0xa7, 0x23,
	0x76, 0x47, 0x07, 0xbf, 0x01, 0x79, 0xdf, 0x23, 0x53, 0xfb, 0x66, 0x22, 0xfe, 0x28, 0x4a, 0x98,
	0xc8, 0xf7, 0xad, 0x72, 0xd6, 0xdd, 0xed, 0xc7, 0x24, 0x38, 0xfe, 0x9c, 0x5d, 0x6d, 0x0f, 0x2e,
	0xd9, 0x1d, 0x5c, 0xf2, 0x7d, 0x70, 0xc9, 0x7b, 0xe5, 0x5a, 0xbb, 0xca, 0xb5, 0x3e, 0x2b, 0xd7,
	0x7a, 0x1e, 0xbe, 0x35, 0x35, 0x36, 0xdb, 0x2f, 0xfb, 0xa6, 0xc4, 0xdb, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9f, 0x07, 0x59, 0x8e, 0xa7, 0x01, 0x00, 0x00,
}

func (m *IssueParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueFeatures != nil {
		{
			size, err := m.IssueFeatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIssueParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssueParams(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decimals != 0 {
		i = encodeVarintIssueParams(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIssueParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintIssueParams(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintIssueParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssueParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssueParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IssueParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovIssueParams(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovIssueParams(uint64(l))
	}
	l = m.TotalSupply.Size()
	n += 1 + l + sovIssueParams(uint64(l))
	if m.Decimals != 0 {
		n += 1 + sovIssueParams(uint64(m.Decimals))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssueParams(uint64(l))
	}
	if m.IssueFeatures != nil {
		l = m.IssueFeatures.Size()
		n += 1 + l + sovIssueParams(uint64(l))
	}
	return n
}

func sovIssueParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssueParams(x uint64) (n int) {
	return sovIssueParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IssueParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssueParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssueParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssueParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssueParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssueParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssueParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssueParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssueParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssueParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssueParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssueParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueFeatures == nil {
				m.IssueFeatures = &IssueFeatures{}
			}
			if err := m.IssueFeatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssueParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssueParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssueParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssueParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssueParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssueParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssueParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssueParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssueParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssueParams = fmt.Errorf("proto: unexpected end of group")
)
