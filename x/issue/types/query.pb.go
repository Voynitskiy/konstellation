// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetCoinIssueDenomsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCoinIssueDenomsRequest) Reset()         { *m = QueryGetCoinIssueDenomsRequest{} }
func (m *QueryGetCoinIssueDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueDenomsRequest) ProtoMessage()    {}
func (*QueryGetCoinIssueDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{0}
}
func (m *QueryGetCoinIssueDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueDenomsRequest.Merge(m, src)
}
func (m *QueryGetCoinIssueDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueDenomsRequest proto.InternalMessageInfo

func (m *QueryGetCoinIssueDenomsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCoinIssueDenomsResponse struct {
	CoinIssueDenoms *CoinIssueDenoms `protobuf:"bytes,1,opt,name=CoinIssueDenoms,proto3" json:"CoinIssueDenoms,omitempty"`
}

func (m *QueryGetCoinIssueDenomsResponse) Reset()         { *m = QueryGetCoinIssueDenomsResponse{} }
func (m *QueryGetCoinIssueDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueDenomsResponse) ProtoMessage()    {}
func (*QueryGetCoinIssueDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{1}
}
func (m *QueryGetCoinIssueDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueDenomsResponse.Merge(m, src)
}
func (m *QueryGetCoinIssueDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueDenomsResponse proto.InternalMessageInfo

func (m *QueryGetCoinIssueDenomsResponse) GetCoinIssueDenoms() *CoinIssueDenoms {
	if m != nil {
		return m.CoinIssueDenoms
	}
	return nil
}

type QueryAllCoinIssueDenomsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueDenomsRequest) Reset()         { *m = QueryAllCoinIssueDenomsRequest{} }
func (m *QueryAllCoinIssueDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueDenomsRequest) ProtoMessage()    {}
func (*QueryAllCoinIssueDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{2}
}
func (m *QueryAllCoinIssueDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueDenomsRequest.Merge(m, src)
}
func (m *QueryAllCoinIssueDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueDenomsRequest proto.InternalMessageInfo

func (m *QueryAllCoinIssueDenomsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoinIssueDenomsResponse struct {
	CoinIssueDenoms []*CoinIssueDenoms  `protobuf:"bytes,1,rep,name=CoinIssueDenoms,proto3" json:"CoinIssueDenoms,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueDenomsResponse) Reset()         { *m = QueryAllCoinIssueDenomsResponse{} }
func (m *QueryAllCoinIssueDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueDenomsResponse) ProtoMessage()    {}
func (*QueryAllCoinIssueDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{3}
}
func (m *QueryAllCoinIssueDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueDenomsResponse.Merge(m, src)
}
func (m *QueryAllCoinIssueDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueDenomsResponse proto.InternalMessageInfo

func (m *QueryAllCoinIssueDenomsResponse) GetCoinIssueDenoms() []*CoinIssueDenoms {
	if m != nil {
		return m.CoinIssueDenoms
	}
	return nil
}

func (m *QueryAllCoinIssueDenomsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoinIssueListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCoinIssueListRequest) Reset()         { *m = QueryGetCoinIssueListRequest{} }
func (m *QueryGetCoinIssueListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueListRequest) ProtoMessage()    {}
func (*QueryGetCoinIssueListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{4}
}
func (m *QueryGetCoinIssueListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueListRequest.Merge(m, src)
}
func (m *QueryGetCoinIssueListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueListRequest proto.InternalMessageInfo

func (m *QueryGetCoinIssueListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCoinIssueListResponse struct {
	CoinIssueList *CoinIssueList `protobuf:"bytes,1,opt,name=CoinIssueList,proto3" json:"CoinIssueList,omitempty"`
}

func (m *QueryGetCoinIssueListResponse) Reset()         { *m = QueryGetCoinIssueListResponse{} }
func (m *QueryGetCoinIssueListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueListResponse) ProtoMessage()    {}
func (*QueryGetCoinIssueListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{5}
}
func (m *QueryGetCoinIssueListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueListResponse.Merge(m, src)
}
func (m *QueryGetCoinIssueListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueListResponse proto.InternalMessageInfo

func (m *QueryGetCoinIssueListResponse) GetCoinIssueList() *CoinIssueList {
	if m != nil {
		return m.CoinIssueList
	}
	return nil
}

type QueryAllCoinIssueListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueListRequest) Reset()         { *m = QueryAllCoinIssueListRequest{} }
func (m *QueryAllCoinIssueListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueListRequest) ProtoMessage()    {}
func (*QueryAllCoinIssueListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{6}
}
func (m *QueryAllCoinIssueListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueListRequest.Merge(m, src)
}
func (m *QueryAllCoinIssueListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueListRequest proto.InternalMessageInfo

func (m *QueryAllCoinIssueListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoinIssueListResponse struct {
	CoinIssueList []*CoinIssueList    `protobuf:"bytes,1,rep,name=CoinIssueList,proto3" json:"CoinIssueList,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueListResponse) Reset()         { *m = QueryAllCoinIssueListResponse{} }
func (m *QueryAllCoinIssueListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueListResponse) ProtoMessage()    {}
func (*QueryAllCoinIssueListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{7}
}
func (m *QueryAllCoinIssueListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueListResponse.Merge(m, src)
}
func (m *QueryAllCoinIssueListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueListResponse proto.InternalMessageInfo

func (m *QueryAllCoinIssueListResponse) GetCoinIssueList() []*CoinIssueList {
	if m != nil {
		return m.CoinIssueList
	}
	return nil
}

func (m *QueryAllCoinIssueListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIssuesParamsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIssuesParamsRequest) Reset()         { *m = QueryGetIssuesParamsRequest{} }
func (m *QueryGetIssuesParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuesParamsRequest) ProtoMessage()    {}
func (*QueryGetIssuesParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{8}
}
func (m *QueryGetIssuesParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuesParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuesParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuesParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuesParamsRequest.Merge(m, src)
}
func (m *QueryGetIssuesParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuesParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuesParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuesParamsRequest proto.InternalMessageInfo

func (m *QueryGetIssuesParamsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIssuesParamsResponse struct {
	IssuesParams *IssuesParams `protobuf:"bytes,1,opt,name=IssuesParams,proto3" json:"IssuesParams,omitempty"`
}

func (m *QueryGetIssuesParamsResponse) Reset()         { *m = QueryGetIssuesParamsResponse{} }
func (m *QueryGetIssuesParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuesParamsResponse) ProtoMessage()    {}
func (*QueryGetIssuesParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{9}
}
func (m *QueryGetIssuesParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuesParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuesParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuesParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuesParamsResponse.Merge(m, src)
}
func (m *QueryGetIssuesParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuesParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuesParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuesParamsResponse proto.InternalMessageInfo

func (m *QueryGetIssuesParamsResponse) GetIssuesParams() *IssuesParams {
	if m != nil {
		return m.IssuesParams
	}
	return nil
}

type QueryAllIssuesParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Params     *IssuesParams      `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryAllIssuesParamsRequest) Reset()         { *m = QueryAllIssuesParamsRequest{} }
func (m *QueryAllIssuesParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuesParamsRequest) ProtoMessage()    {}
func (*QueryAllIssuesParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{10}
}
func (m *QueryAllIssuesParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuesParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuesParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuesParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuesParamsRequest.Merge(m, src)
}
func (m *QueryAllIssuesParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuesParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuesParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuesParamsRequest proto.InternalMessageInfo

func (m *QueryAllIssuesParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllIssuesParamsRequest) GetParams() *IssuesParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type QueryAllIssuesParamsResponse struct {
	IssuesParams []*IssuesParams     `protobuf:"bytes,1,rep,name=IssuesParams,proto3" json:"IssuesParams,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuesParamsResponse) Reset()         { *m = QueryAllIssuesParamsResponse{} }
func (m *QueryAllIssuesParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuesParamsResponse) ProtoMessage()    {}
func (*QueryAllIssuesParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{11}
}
func (m *QueryAllIssuesParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuesParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuesParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuesParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuesParamsResponse.Merge(m, src)
}
func (m *QueryAllIssuesParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuesParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuesParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuesParamsResponse proto.InternalMessageInfo

func (m *QueryAllIssuesParamsResponse) GetIssuesParams() []*IssuesParams {
	if m != nil {
		return m.IssuesParams
	}
	return nil
}

func (m *QueryAllIssuesParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIssueParamsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIssueParamsRequest) Reset()         { *m = QueryGetIssueParamsRequest{} }
func (m *QueryGetIssueParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueParamsRequest) ProtoMessage()    {}
func (*QueryGetIssueParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{12}
}
func (m *QueryGetIssueParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueParamsRequest.Merge(m, src)
}
func (m *QueryGetIssueParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueParamsRequest proto.InternalMessageInfo

func (m *QueryGetIssueParamsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIssueParamsResponse struct {
	IssueParams *IssueParams `protobuf:"bytes,1,opt,name=IssueParams,proto3" json:"IssueParams,omitempty"`
}

func (m *QueryGetIssueParamsResponse) Reset()         { *m = QueryGetIssueParamsResponse{} }
func (m *QueryGetIssueParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueParamsResponse) ProtoMessage()    {}
func (*QueryGetIssueParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{13}
}
func (m *QueryGetIssueParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueParamsResponse.Merge(m, src)
}
func (m *QueryGetIssueParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueParamsResponse proto.InternalMessageInfo

func (m *QueryGetIssueParamsResponse) GetIssueParams() *IssueParams {
	if m != nil {
		return m.IssueParams
	}
	return nil
}

type QueryAllIssueParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueParamsRequest) Reset()         { *m = QueryAllIssueParamsRequest{} }
func (m *QueryAllIssueParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueParamsRequest) ProtoMessage()    {}
func (*QueryAllIssueParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{14}
}
func (m *QueryAllIssueParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueParamsRequest.Merge(m, src)
}
func (m *QueryAllIssueParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueParamsRequest proto.InternalMessageInfo

func (m *QueryAllIssueParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssueParamsResponse struct {
	IssueParams []*IssueParams      `protobuf:"bytes,1,rep,name=IssueParams,proto3" json:"IssueParams,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueParamsResponse) Reset()         { *m = QueryAllIssueParamsResponse{} }
func (m *QueryAllIssueParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueParamsResponse) ProtoMessage()    {}
func (*QueryAllIssueParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{15}
}
func (m *QueryAllIssueParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueParamsResponse.Merge(m, src)
}
func (m *QueryAllIssueParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueParamsResponse proto.InternalMessageInfo

func (m *QueryAllIssueParamsResponse) GetIssueParams() []*IssueParams {
	if m != nil {
		return m.IssueParams
	}
	return nil
}

func (m *QueryAllIssueParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIssueFeaturesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIssueFeaturesRequest) Reset()         { *m = QueryGetIssueFeaturesRequest{} }
func (m *QueryGetIssueFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueFeaturesRequest) ProtoMessage()    {}
func (*QueryGetIssueFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{16}
}
func (m *QueryGetIssueFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueFeaturesRequest.Merge(m, src)
}
func (m *QueryGetIssueFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueFeaturesRequest proto.InternalMessageInfo

func (m *QueryGetIssueFeaturesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIssueFeaturesResponse struct {
	IssueFeatures *IssueFeatures `protobuf:"bytes,1,opt,name=IssueFeatures,proto3" json:"IssueFeatures,omitempty"`
}

func (m *QueryGetIssueFeaturesResponse) Reset()         { *m = QueryGetIssueFeaturesResponse{} }
func (m *QueryGetIssueFeaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueFeaturesResponse) ProtoMessage()    {}
func (*QueryGetIssueFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{17}
}
func (m *QueryGetIssueFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueFeaturesResponse.Merge(m, src)
}
func (m *QueryGetIssueFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueFeaturesResponse proto.InternalMessageInfo

func (m *QueryGetIssueFeaturesResponse) GetIssueFeatures() *IssueFeatures {
	if m != nil {
		return m.IssueFeatures
	}
	return nil
}

type QueryAllIssueFeaturesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueFeaturesRequest) Reset()         { *m = QueryAllIssueFeaturesRequest{} }
func (m *QueryAllIssueFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueFeaturesRequest) ProtoMessage()    {}
func (*QueryAllIssueFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{18}
}
func (m *QueryAllIssueFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueFeaturesRequest.Merge(m, src)
}
func (m *QueryAllIssueFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueFeaturesRequest proto.InternalMessageInfo

func (m *QueryAllIssueFeaturesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssueFeaturesResponse struct {
	IssueFeatures []*IssueFeatures    `protobuf:"bytes,1,rep,name=IssueFeatures,proto3" json:"IssueFeatures,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueFeaturesResponse) Reset()         { *m = QueryAllIssueFeaturesResponse{} }
func (m *QueryAllIssueFeaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueFeaturesResponse) ProtoMessage()    {}
func (*QueryAllIssueFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{19}
}
func (m *QueryAllIssueFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueFeaturesResponse.Merge(m, src)
}
func (m *QueryAllIssueFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueFeaturesResponse proto.InternalMessageInfo

func (m *QueryAllIssueFeaturesResponse) GetIssueFeatures() []*IssueFeatures {
	if m != nil {
		return m.IssueFeatures
	}
	return nil
}

func (m *QueryAllIssueFeaturesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetParamsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetParamsRequest) Reset()         { *m = QueryGetParamsRequest{} }
func (m *QueryGetParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetParamsRequest) ProtoMessage()    {}
func (*QueryGetParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{20}
}
func (m *QueryGetParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParamsRequest.Merge(m, src)
}
func (m *QueryGetParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParamsRequest proto.InternalMessageInfo

func (m *QueryGetParamsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=Params,proto3" json:"Params,omitempty"`
}

func (m *QueryGetParamsResponse) Reset()         { *m = QueryGetParamsResponse{} }
func (m *QueryGetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetParamsResponse) ProtoMessage()    {}
func (*QueryGetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{21}
}
func (m *QueryGetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParamsResponse.Merge(m, src)
}
func (m *QueryGetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParamsResponse proto.InternalMessageInfo

func (m *QueryGetParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type QueryAllParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllParamsRequest) Reset()         { *m = QueryAllParamsRequest{} }
func (m *QueryAllParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllParamsRequest) ProtoMessage()    {}
func (*QueryAllParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{22}
}
func (m *QueryAllParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParamsRequest.Merge(m, src)
}
func (m *QueryAllParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParamsRequest proto.InternalMessageInfo

func (m *QueryAllParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllParamsResponse struct {
	Params     []*Params           `protobuf:"bytes,1,rep,name=Params,proto3" json:"Params,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllParamsResponse) Reset()         { *m = QueryAllParamsResponse{} }
func (m *QueryAllParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllParamsResponse) ProtoMessage()    {}
func (*QueryAllParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{23}
}
func (m *QueryAllParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllParamsResponse.Merge(m, src)
}
func (m *QueryAllParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllParamsResponse proto.InternalMessageInfo

func (m *QueryAllParamsResponse) GetParams() []*Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *QueryAllParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIssuesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetIssuesRequest) Reset()         { *m = QueryGetIssuesRequest{} }
func (m *QueryGetIssuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuesRequest) ProtoMessage()    {}
func (*QueryGetIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{24}
}
func (m *QueryGetIssuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuesRequest.Merge(m, src)
}
func (m *QueryGetIssuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuesRequest proto.InternalMessageInfo

func (m *QueryGetIssuesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetIssuesResponse struct {
	Issues *Issues `protobuf:"bytes,1,opt,name=Issues,proto3" json:"Issues,omitempty"`
}

func (m *QueryGetIssuesResponse) Reset()         { *m = QueryGetIssuesResponse{} }
func (m *QueryGetIssuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuesResponse) ProtoMessage()    {}
func (*QueryGetIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{25}
}
func (m *QueryGetIssuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuesResponse.Merge(m, src)
}
func (m *QueryGetIssuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuesResponse proto.InternalMessageInfo

func (m *QueryGetIssuesResponse) GetIssues() *Issues {
	if m != nil {
		return m.Issues
	}
	return nil
}

type QueryAllIssuesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuesRequest) Reset()         { *m = QueryAllIssuesRequest{} }
func (m *QueryAllIssuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuesRequest) ProtoMessage()    {}
func (*QueryAllIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{26}
}
func (m *QueryAllIssuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuesRequest.Merge(m, src)
}
func (m *QueryAllIssuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuesRequest proto.InternalMessageInfo

func (m *QueryAllIssuesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssuesResponse struct {
	Issues     []*Issues           `protobuf:"bytes,1,rep,name=Issues,proto3" json:"Issues,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuesResponse) Reset()         { *m = QueryAllIssuesResponse{} }
func (m *QueryAllIssuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuesResponse) ProtoMessage()    {}
func (*QueryAllIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{27}
}
func (m *QueryAllIssuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuesResponse.Merge(m, src)
}
func (m *QueryAllIssuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuesResponse proto.InternalMessageInfo

func (m *QueryAllIssuesResponse) GetIssues() []*Issues {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *QueryAllIssuesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoinIssueDenomRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCoinIssueDenomRequest) Reset()         { *m = QueryGetCoinIssueDenomRequest{} }
func (m *QueryGetCoinIssueDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueDenomRequest) ProtoMessage()    {}
func (*QueryGetCoinIssueDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{28}
}
func (m *QueryGetCoinIssueDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueDenomRequest.Merge(m, src)
}
func (m *QueryGetCoinIssueDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueDenomRequest proto.InternalMessageInfo

func (m *QueryGetCoinIssueDenomRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCoinIssueDenomResponse struct {
	CoinIssueDenom *CoinIssueDenom `protobuf:"bytes,1,opt,name=CoinIssueDenom,proto3" json:"CoinIssueDenom,omitempty"`
}

func (m *QueryGetCoinIssueDenomResponse) Reset()         { *m = QueryGetCoinIssueDenomResponse{} }
func (m *QueryGetCoinIssueDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueDenomResponse) ProtoMessage()    {}
func (*QueryGetCoinIssueDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{29}
}
func (m *QueryGetCoinIssueDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueDenomResponse.Merge(m, src)
}
func (m *QueryGetCoinIssueDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueDenomResponse proto.InternalMessageInfo

func (m *QueryGetCoinIssueDenomResponse) GetCoinIssueDenom() *CoinIssueDenom {
	if m != nil {
		return m.CoinIssueDenom
	}
	return nil
}

type QueryAllCoinIssueDenomRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueDenomRequest) Reset()         { *m = QueryAllCoinIssueDenomRequest{} }
func (m *QueryAllCoinIssueDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueDenomRequest) ProtoMessage()    {}
func (*QueryAllCoinIssueDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{30}
}
func (m *QueryAllCoinIssueDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueDenomRequest.Merge(m, src)
}
func (m *QueryAllCoinIssueDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueDenomRequest proto.InternalMessageInfo

func (m *QueryAllCoinIssueDenomRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoinIssueDenomResponse struct {
	CoinIssueDenom []*CoinIssueDenom   `protobuf:"bytes,1,rep,name=CoinIssueDenom,proto3" json:"CoinIssueDenom,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueDenomResponse) Reset()         { *m = QueryAllCoinIssueDenomResponse{} }
func (m *QueryAllCoinIssueDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueDenomResponse) ProtoMessage()    {}
func (*QueryAllCoinIssueDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{31}
}
func (m *QueryAllCoinIssueDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueDenomResponse.Merge(m, src)
}
func (m *QueryAllCoinIssueDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueDenomResponse proto.InternalMessageInfo

func (m *QueryAllCoinIssueDenomResponse) GetCoinIssueDenom() []*CoinIssueDenom {
	if m != nil {
		return m.CoinIssueDenom
	}
	return nil
}

func (m *QueryAllCoinIssueDenomResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoinIssueRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetCoinIssueRequest) Reset()         { *m = QueryGetCoinIssueRequest{} }
func (m *QueryGetCoinIssueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueRequest) ProtoMessage()    {}
func (*QueryGetCoinIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{32}
}
func (m *QueryGetCoinIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueRequest.Merge(m, src)
}
func (m *QueryGetCoinIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueRequest proto.InternalMessageInfo

func (m *QueryGetCoinIssueRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetCoinIssueRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetCoinIssueResponse struct {
	CoinIssue *CoinIssue `protobuf:"bytes,1,opt,name=CoinIssue,proto3" json:"CoinIssue,omitempty"`
}

func (m *QueryGetCoinIssueResponse) Reset()         { *m = QueryGetCoinIssueResponse{} }
func (m *QueryGetCoinIssueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinIssueResponse) ProtoMessage()    {}
func (*QueryGetCoinIssueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{33}
}
func (m *QueryGetCoinIssueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinIssueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinIssueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinIssueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinIssueResponse.Merge(m, src)
}
func (m *QueryGetCoinIssueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinIssueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinIssueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinIssueResponse proto.InternalMessageInfo

func (m *QueryGetCoinIssueResponse) GetCoinIssue() *CoinIssue {
	if m != nil {
		return m.CoinIssue
	}
	return nil
}

type QueryAllCoinIssueRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueRequest) Reset()         { *m = QueryAllCoinIssueRequest{} }
func (m *QueryAllCoinIssueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueRequest) ProtoMessage()    {}
func (*QueryAllCoinIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{34}
}
func (m *QueryAllCoinIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueRequest.Merge(m, src)
}
func (m *QueryAllCoinIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueRequest proto.InternalMessageInfo

func (m *QueryAllCoinIssueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoinIssueResponse struct {
	CoinIssue  []*CoinIssue        `protobuf:"bytes,1,rep,name=CoinIssue,proto3" json:"CoinIssue,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinIssueResponse) Reset()         { *m = QueryAllCoinIssueResponse{} }
func (m *QueryAllCoinIssueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinIssueResponse) ProtoMessage()    {}
func (*QueryAllCoinIssueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{35}
}
func (m *QueryAllCoinIssueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinIssueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinIssueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinIssueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinIssueResponse.Merge(m, src)
}
func (m *QueryAllCoinIssueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinIssueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinIssueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinIssueResponse proto.InternalMessageInfo

func (m *QueryAllCoinIssueResponse) GetCoinIssue() []*CoinIssue {
	if m != nil {
		return m.CoinIssue
	}
	return nil
}

func (m *QueryAllCoinIssueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAddressFreezeListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAddressFreezeListRequest) Reset()         { *m = QueryGetAddressFreezeListRequest{} }
func (m *QueryGetAddressFreezeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressFreezeListRequest) ProtoMessage()    {}
func (*QueryGetAddressFreezeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{36}
}
func (m *QueryGetAddressFreezeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressFreezeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressFreezeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressFreezeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressFreezeListRequest.Merge(m, src)
}
func (m *QueryGetAddressFreezeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressFreezeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressFreezeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressFreezeListRequest proto.InternalMessageInfo

func (m *QueryGetAddressFreezeListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAddressFreezeListResponse struct {
	AddressFreezeList *AddressFreezeList `protobuf:"bytes,1,opt,name=AddressFreezeList,proto3" json:"AddressFreezeList,omitempty"`
}

func (m *QueryGetAddressFreezeListResponse) Reset()         { *m = QueryGetAddressFreezeListResponse{} }
func (m *QueryGetAddressFreezeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressFreezeListResponse) ProtoMessage()    {}
func (*QueryGetAddressFreezeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{37}
}
func (m *QueryGetAddressFreezeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressFreezeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressFreezeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressFreezeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressFreezeListResponse.Merge(m, src)
}
func (m *QueryGetAddressFreezeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressFreezeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressFreezeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressFreezeListResponse proto.InternalMessageInfo

func (m *QueryGetAddressFreezeListResponse) GetAddressFreezeList() *AddressFreezeList {
	if m != nil {
		return m.AddressFreezeList
	}
	return nil
}

type QueryAllAddressFreezeListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressFreezeListRequest) Reset()         { *m = QueryAllAddressFreezeListRequest{} }
func (m *QueryAllAddressFreezeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressFreezeListRequest) ProtoMessage()    {}
func (*QueryAllAddressFreezeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{38}
}
func (m *QueryAllAddressFreezeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressFreezeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressFreezeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressFreezeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressFreezeListRequest.Merge(m, src)
}
func (m *QueryAllAddressFreezeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressFreezeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressFreezeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressFreezeListRequest proto.InternalMessageInfo

func (m *QueryAllAddressFreezeListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAddressFreezeListResponse struct {
	AddressFreezeList []*AddressFreezeList `protobuf:"bytes,1,rep,name=AddressFreezeList,proto3" json:"AddressFreezeList,omitempty"`
	Pagination        *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressFreezeListResponse) Reset()         { *m = QueryAllAddressFreezeListResponse{} }
func (m *QueryAllAddressFreezeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressFreezeListResponse) ProtoMessage()    {}
func (*QueryAllAddressFreezeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{39}
}
func (m *QueryAllAddressFreezeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressFreezeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressFreezeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressFreezeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressFreezeListResponse.Merge(m, src)
}
func (m *QueryAllAddressFreezeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressFreezeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressFreezeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressFreezeListResponse proto.InternalMessageInfo

func (m *QueryAllAddressFreezeListResponse) GetAddressFreezeList() []*AddressFreezeList {
	if m != nil {
		return m.AddressFreezeList
	}
	return nil
}

func (m *QueryAllAddressFreezeListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAddressFreezeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAddressFreezeRequest) Reset()         { *m = QueryGetAddressFreezeRequest{} }
func (m *QueryGetAddressFreezeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressFreezeRequest) ProtoMessage()    {}
func (*QueryGetAddressFreezeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{40}
}
func (m *QueryGetAddressFreezeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressFreezeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressFreezeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressFreezeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressFreezeRequest.Merge(m, src)
}
func (m *QueryGetAddressFreezeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressFreezeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressFreezeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressFreezeRequest proto.InternalMessageInfo

func (m *QueryGetAddressFreezeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAddressFreezeResponse struct {
	AddressFreeze *AddressFreeze `protobuf:"bytes,1,opt,name=AddressFreeze,proto3" json:"AddressFreeze,omitempty"`
}

func (m *QueryGetAddressFreezeResponse) Reset()         { *m = QueryGetAddressFreezeResponse{} }
func (m *QueryGetAddressFreezeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressFreezeResponse) ProtoMessage()    {}
func (*QueryGetAddressFreezeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{41}
}
func (m *QueryGetAddressFreezeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressFreezeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressFreezeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressFreezeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressFreezeResponse.Merge(m, src)
}
func (m *QueryGetAddressFreezeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressFreezeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressFreezeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressFreezeResponse proto.InternalMessageInfo

func (m *QueryGetAddressFreezeResponse) GetAddressFreeze() *AddressFreeze {
	if m != nil {
		return m.AddressFreeze
	}
	return nil
}

type QueryAllAddressFreezeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressFreezeRequest) Reset()         { *m = QueryAllAddressFreezeRequest{} }
func (m *QueryAllAddressFreezeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressFreezeRequest) ProtoMessage()    {}
func (*QueryAllAddressFreezeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{42}
}
func (m *QueryAllAddressFreezeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressFreezeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressFreezeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressFreezeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressFreezeRequest.Merge(m, src)
}
func (m *QueryAllAddressFreezeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressFreezeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressFreezeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressFreezeRequest proto.InternalMessageInfo

func (m *QueryAllAddressFreezeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAddressFreezeResponse struct {
	AddressFreeze []*AddressFreeze    `protobuf:"bytes,1,rep,name=AddressFreeze,proto3" json:"AddressFreeze,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressFreezeResponse) Reset()         { *m = QueryAllAddressFreezeResponse{} }
func (m *QueryAllAddressFreezeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressFreezeResponse) ProtoMessage()    {}
func (*QueryAllAddressFreezeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{43}
}
func (m *QueryAllAddressFreezeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressFreezeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressFreezeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressFreezeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressFreezeResponse.Merge(m, src)
}
func (m *QueryAllAddressFreezeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressFreezeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressFreezeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressFreezeResponse proto.InternalMessageInfo

func (m *QueryAllAddressFreezeResponse) GetAddressFreeze() []*AddressFreeze {
	if m != nil {
		return m.AddressFreeze
	}
	return nil
}

func (m *QueryAllAddressFreezeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFreezeRequest struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Holder string `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
}

func (m *QueryGetFreezeRequest) Reset()         { *m = QueryGetFreezeRequest{} }
func (m *QueryGetFreezeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFreezeRequest) ProtoMessage()    {}
func (*QueryGetFreezeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{44}
}
func (m *QueryGetFreezeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFreezeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFreezeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFreezeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFreezeRequest.Merge(m, src)
}
func (m *QueryGetFreezeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFreezeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFreezeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFreezeRequest proto.InternalMessageInfo

func (m *QueryGetFreezeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetFreezeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetFreezeRequest) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

type QueryGetFreezeResponse struct {
	Freeze *Freeze `protobuf:"bytes,1,opt,name=Freeze,proto3" json:"Freeze,omitempty"`
}

func (m *QueryGetFreezeResponse) Reset()         { *m = QueryGetFreezeResponse{} }
func (m *QueryGetFreezeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFreezeResponse) ProtoMessage()    {}
func (*QueryGetFreezeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{45}
}
func (m *QueryGetFreezeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFreezeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFreezeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFreezeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFreezeResponse.Merge(m, src)
}
func (m *QueryGetFreezeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFreezeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFreezeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFreezeResponse proto.InternalMessageInfo

func (m *QueryGetFreezeResponse) GetFreeze() *Freeze {
	if m != nil {
		return m.Freeze
	}
	return nil
}

type QueryAllFreezeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Denom      string             `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryAllFreezeRequest) Reset()         { *m = QueryAllFreezeRequest{} }
func (m *QueryAllFreezeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFreezeRequest) ProtoMessage()    {}
func (*QueryAllFreezeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{46}
}
func (m *QueryAllFreezeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFreezeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFreezeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFreezeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFreezeRequest.Merge(m, src)
}
func (m *QueryAllFreezeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFreezeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFreezeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFreezeRequest proto.InternalMessageInfo

func (m *QueryAllFreezeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllFreezeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryAllFreezeResponse struct {
	Freeze     []*Freeze           `protobuf:"bytes,1,rep,name=Freeze,proto3" json:"Freeze,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFreezeResponse) Reset()         { *m = QueryAllFreezeResponse{} }
func (m *QueryAllFreezeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFreezeResponse) ProtoMessage()    {}
func (*QueryAllFreezeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{47}
}
func (m *QueryAllFreezeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFreezeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFreezeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFreezeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFreezeResponse.Merge(m, src)
}
func (m *QueryAllFreezeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFreezeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFreezeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFreezeResponse proto.InternalMessageInfo

func (m *QueryAllFreezeResponse) GetFreeze() []*Freeze {
	if m != nil {
		return m.Freeze
	}
	return nil
}

func (m *QueryAllFreezeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCoinsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCoinsRequest) Reset()         { *m = QueryGetCoinsRequest{} }
func (m *QueryGetCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinsRequest) ProtoMessage()    {}
func (*QueryGetCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{48}
}
func (m *QueryGetCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinsRequest.Merge(m, src)
}
func (m *QueryGetCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinsRequest proto.InternalMessageInfo

func (m *QueryGetCoinsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCoinsResponse struct {
	Coins *Coins `protobuf:"bytes,1,opt,name=Coins,proto3" json:"Coins,omitempty"`
}

func (m *QueryGetCoinsResponse) Reset()         { *m = QueryGetCoinsResponse{} }
func (m *QueryGetCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCoinsResponse) ProtoMessage()    {}
func (*QueryGetCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{49}
}
func (m *QueryGetCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCoinsResponse.Merge(m, src)
}
func (m *QueryGetCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCoinsResponse proto.InternalMessageInfo

func (m *QueryGetCoinsResponse) GetCoins() *Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type QueryAllCoinsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinsRequest) Reset()         { *m = QueryAllCoinsRequest{} }
func (m *QueryAllCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinsRequest) ProtoMessage()    {}
func (*QueryAllCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{50}
}
func (m *QueryAllCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinsRequest.Merge(m, src)
}
func (m *QueryAllCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinsRequest proto.InternalMessageInfo

func (m *QueryAllCoinsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCoinsResponse struct {
	Coins      []*Coins            `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCoinsResponse) Reset()         { *m = QueryAllCoinsResponse{} }
func (m *QueryAllCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCoinsResponse) ProtoMessage()    {}
func (*QueryAllCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{51}
}
func (m *QueryAllCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCoinsResponse.Merge(m, src)
}
func (m *QueryAllCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCoinsResponse proto.InternalMessageInfo

func (m *QueryAllCoinsResponse) GetCoins() []*Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *QueryAllCoinsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllowanceListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAllowanceListRequest) Reset()         { *m = QueryGetAllowanceListRequest{} }
func (m *QueryGetAllowanceListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowanceListRequest) ProtoMessage()    {}
func (*QueryGetAllowanceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{52}
}
func (m *QueryGetAllowanceListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowanceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowanceListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowanceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowanceListRequest.Merge(m, src)
}
func (m *QueryGetAllowanceListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowanceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowanceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowanceListRequest proto.InternalMessageInfo

func (m *QueryGetAllowanceListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAllowanceListResponse struct {
	AllowanceList *AllowanceList `protobuf:"bytes,1,opt,name=AllowanceList,proto3" json:"AllowanceList,omitempty"`
}

func (m *QueryGetAllowanceListResponse) Reset()         { *m = QueryGetAllowanceListResponse{} }
func (m *QueryGetAllowanceListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowanceListResponse) ProtoMessage()    {}
func (*QueryGetAllowanceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{53}
}
func (m *QueryGetAllowanceListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowanceListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowanceListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowanceListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowanceListResponse.Merge(m, src)
}
func (m *QueryGetAllowanceListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowanceListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowanceListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowanceListResponse proto.InternalMessageInfo

func (m *QueryGetAllowanceListResponse) GetAllowanceList() *AllowanceList {
	if m != nil {
		return m.AllowanceList
	}
	return nil
}

type QueryAllAllowanceListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowanceListRequest) Reset()         { *m = QueryAllAllowanceListRequest{} }
func (m *QueryAllAllowanceListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowanceListRequest) ProtoMessage()    {}
func (*QueryAllAllowanceListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{54}
}
func (m *QueryAllAllowanceListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowanceListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowanceListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowanceListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowanceListRequest.Merge(m, src)
}
func (m *QueryAllAllowanceListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowanceListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowanceListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowanceListRequest proto.InternalMessageInfo

func (m *QueryAllAllowanceListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAllowanceListResponse struct {
	AllowanceList []*AllowanceList    `protobuf:"bytes,1,rep,name=AllowanceList,proto3" json:"AllowanceList,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowanceListResponse) Reset()         { *m = QueryAllAllowanceListResponse{} }
func (m *QueryAllAllowanceListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowanceListResponse) ProtoMessage()    {}
func (*QueryAllAllowanceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{55}
}
func (m *QueryAllAllowanceListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowanceListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowanceListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowanceListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowanceListResponse.Merge(m, src)
}
func (m *QueryAllAllowanceListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowanceListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowanceListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowanceListResponse proto.InternalMessageInfo

func (m *QueryAllAllowanceListResponse) GetAllowanceList() []*AllowanceList {
	if m != nil {
		return m.AllowanceList
	}
	return nil
}

func (m *QueryAllAllowanceListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllowanceRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string `protobuf:"bytes,3,opt,name=spender,proto3" json:"spender,omitempty"`
	Denom   string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetAllowanceRequest) Reset()         { *m = QueryGetAllowanceRequest{} }
func (m *QueryGetAllowanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowanceRequest) ProtoMessage()    {}
func (*QueryGetAllowanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{56}
}
func (m *QueryGetAllowanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowanceRequest.Merge(m, src)
}
func (m *QueryGetAllowanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowanceRequest proto.InternalMessageInfo

func (m *QueryGetAllowanceRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetAllowanceRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryGetAllowanceRequest) GetSpender() string {
	if m != nil {
		return m.Spender
	}
	return ""
}

func (m *QueryGetAllowanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetAllowanceResponse struct {
	Allowance *Allowance `protobuf:"bytes,1,opt,name=Allowance,proto3" json:"Allowance,omitempty"`
}

func (m *QueryGetAllowanceResponse) Reset()         { *m = QueryGetAllowanceResponse{} }
func (m *QueryGetAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowanceResponse) ProtoMessage()    {}
func (*QueryGetAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{57}
}
func (m *QueryGetAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowanceResponse.Merge(m, src)
}
func (m *QueryGetAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowanceResponse proto.InternalMessageInfo

func (m *QueryGetAllowanceResponse) GetAllowance() *Allowance {
	if m != nil {
		return m.Allowance
	}
	return nil
}

type QueryAllAllowanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom      string             `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryAllAllowanceRequest) Reset()         { *m = QueryAllAllowanceRequest{} }
func (m *QueryAllAllowanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowanceRequest) ProtoMessage()    {}
func (*QueryAllAllowanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{58}
}
func (m *QueryAllAllowanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowanceRequest.Merge(m, src)
}
func (m *QueryAllAllowanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowanceRequest proto.InternalMessageInfo

func (m *QueryAllAllowanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllAllowanceRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryAllAllowanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryAllAllowanceResponse struct {
	Allowance  []*Allowance        `protobuf:"bytes,1,rep,name=Allowance,proto3" json:"Allowance,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowanceResponse) Reset()         { *m = QueryAllAllowanceResponse{} }
func (m *QueryAllAllowanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowanceResponse) ProtoMessage()    {}
func (*QueryAllAllowanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{59}
}
func (m *QueryAllAllowanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowanceResponse.Merge(m, src)
}
func (m *QueryAllAllowanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowanceResponse proto.InternalMessageInfo

func (m *QueryAllAllowanceResponse) GetAllowance() []*Allowance {
	if m != nil {
		return m.Allowance
	}
	return nil
}

func (m *QueryAllAllowanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAddressRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAddressRequest) Reset()         { *m = QueryGetAddressRequest{} }
func (m *QueryGetAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressRequest) ProtoMessage()    {}
func (*QueryGetAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{60}
}
func (m *QueryGetAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressRequest.Merge(m, src)
}
func (m *QueryGetAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressRequest proto.InternalMessageInfo

func (m *QueryGetAddressRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAddressResponse struct {
	Address *Address `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *QueryGetAddressResponse) Reset()         { *m = QueryGetAddressResponse{} }
func (m *QueryGetAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressResponse) ProtoMessage()    {}
func (*QueryGetAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{61}
}
func (m *QueryGetAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressResponse.Merge(m, src)
}
func (m *QueryGetAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressResponse proto.InternalMessageInfo

func (m *QueryGetAddressResponse) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type QueryAllAddressRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressRequest) Reset()         { *m = QueryAllAddressRequest{} }
func (m *QueryAllAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressRequest) ProtoMessage()    {}
func (*QueryAllAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{62}
}
func (m *QueryAllAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressRequest.Merge(m, src)
}
func (m *QueryAllAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressRequest proto.InternalMessageInfo

func (m *QueryAllAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAddressResponse struct {
	Address    []*Address          `protobuf:"bytes,1,rep,name=Address,proto3" json:"Address,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressResponse) Reset()         { *m = QueryAllAddressResponse{} }
func (m *QueryAllAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressResponse) ProtoMessage()    {}
func (*QueryAllAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17ceab730567459d, []int{63}
}
func (m *QueryAllAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressResponse.Merge(m, src)
}
func (m *QueryAllAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressResponse proto.InternalMessageInfo

func (m *QueryAllAddressResponse) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *QueryAllAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetCoinIssueDenomsRequest)(nil), "konstellation.issue.QueryGetCoinIssueDenomsRequest")
	proto.RegisterType((*QueryGetCoinIssueDenomsResponse)(nil), "konstellation.issue.QueryGetCoinIssueDenomsResponse")
	proto.RegisterType((*QueryAllCoinIssueDenomsRequest)(nil), "konstellation.issue.QueryAllCoinIssueDenomsRequest")
	proto.RegisterType((*QueryAllCoinIssueDenomsResponse)(nil), "konstellation.issue.QueryAllCoinIssueDenomsResponse")
	proto.RegisterType((*QueryGetCoinIssueListRequest)(nil), "konstellation.issue.QueryGetCoinIssueListRequest")
	proto.RegisterType((*QueryGetCoinIssueListResponse)(nil), "konstellation.issue.QueryGetCoinIssueListResponse")
	proto.RegisterType((*QueryAllCoinIssueListRequest)(nil), "konstellation.issue.QueryAllCoinIssueListRequest")
	proto.RegisterType((*QueryAllCoinIssueListResponse)(nil), "konstellation.issue.QueryAllCoinIssueListResponse")
	proto.RegisterType((*QueryGetIssuesParamsRequest)(nil), "konstellation.issue.QueryGetIssuesParamsRequest")
	proto.RegisterType((*QueryGetIssuesParamsResponse)(nil), "konstellation.issue.QueryGetIssuesParamsResponse")
	proto.RegisterType((*QueryAllIssuesParamsRequest)(nil), "konstellation.issue.QueryAllIssuesParamsRequest")
	proto.RegisterType((*QueryAllIssuesParamsResponse)(nil), "konstellation.issue.QueryAllIssuesParamsResponse")
	proto.RegisterType((*QueryGetIssueParamsRequest)(nil), "konstellation.issue.QueryGetIssueParamsRequest")
	proto.RegisterType((*QueryGetIssueParamsResponse)(nil), "konstellation.issue.QueryGetIssueParamsResponse")
	proto.RegisterType((*QueryAllIssueParamsRequest)(nil), "konstellation.issue.QueryAllIssueParamsRequest")
	proto.RegisterType((*QueryAllIssueParamsResponse)(nil), "konstellation.issue.QueryAllIssueParamsResponse")
	proto.RegisterType((*QueryGetIssueFeaturesRequest)(nil), "konstellation.issue.QueryGetIssueFeaturesRequest")
	proto.RegisterType((*QueryGetIssueFeaturesResponse)(nil), "konstellation.issue.QueryGetIssueFeaturesResponse")
	proto.RegisterType((*QueryAllIssueFeaturesRequest)(nil), "konstellation.issue.QueryAllIssueFeaturesRequest")
	proto.RegisterType((*QueryAllIssueFeaturesResponse)(nil), "konstellation.issue.QueryAllIssueFeaturesResponse")
	proto.RegisterType((*QueryGetParamsRequest)(nil), "konstellation.issue.QueryGetParamsRequest")
	proto.RegisterType((*QueryGetParamsResponse)(nil), "konstellation.issue.QueryGetParamsResponse")
	proto.RegisterType((*QueryAllParamsRequest)(nil), "konstellation.issue.QueryAllParamsRequest")
	proto.RegisterType((*QueryAllParamsResponse)(nil), "konstellation.issue.QueryAllParamsResponse")
	proto.RegisterType((*QueryGetIssuesRequest)(nil), "konstellation.issue.QueryGetIssuesRequest")
	proto.RegisterType((*QueryGetIssuesResponse)(nil), "konstellation.issue.QueryGetIssuesResponse")
	proto.RegisterType((*QueryAllIssuesRequest)(nil), "konstellation.issue.QueryAllIssuesRequest")
	proto.RegisterType((*QueryAllIssuesResponse)(nil), "konstellation.issue.QueryAllIssuesResponse")
	proto.RegisterType((*QueryGetCoinIssueDenomRequest)(nil), "konstellation.issue.QueryGetCoinIssueDenomRequest")
	proto.RegisterType((*QueryGetCoinIssueDenomResponse)(nil), "konstellation.issue.QueryGetCoinIssueDenomResponse")
	proto.RegisterType((*QueryAllCoinIssueDenomRequest)(nil), "konstellation.issue.QueryAllCoinIssueDenomRequest")
	proto.RegisterType((*QueryAllCoinIssueDenomResponse)(nil), "konstellation.issue.QueryAllCoinIssueDenomResponse")
	proto.RegisterType((*QueryGetCoinIssueRequest)(nil), "konstellation.issue.QueryGetCoinIssueRequest")
	proto.RegisterType((*QueryGetCoinIssueResponse)(nil), "konstellation.issue.QueryGetCoinIssueResponse")
	proto.RegisterType((*QueryAllCoinIssueRequest)(nil), "konstellation.issue.QueryAllCoinIssueRequest")
	proto.RegisterType((*QueryAllCoinIssueResponse)(nil), "konstellation.issue.QueryAllCoinIssueResponse")
	proto.RegisterType((*QueryGetAddressFreezeListRequest)(nil), "konstellation.issue.QueryGetAddressFreezeListRequest")
	proto.RegisterType((*QueryGetAddressFreezeListResponse)(nil), "konstellation.issue.QueryGetAddressFreezeListResponse")
	proto.RegisterType((*QueryAllAddressFreezeListRequest)(nil), "konstellation.issue.QueryAllAddressFreezeListRequest")
	proto.RegisterType((*QueryAllAddressFreezeListResponse)(nil), "konstellation.issue.QueryAllAddressFreezeListResponse")
	proto.RegisterType((*QueryGetAddressFreezeRequest)(nil), "konstellation.issue.QueryGetAddressFreezeRequest")
	proto.RegisterType((*QueryGetAddressFreezeResponse)(nil), "konstellation.issue.QueryGetAddressFreezeResponse")
	proto.RegisterType((*QueryAllAddressFreezeRequest)(nil), "konstellation.issue.QueryAllAddressFreezeRequest")
	proto.RegisterType((*QueryAllAddressFreezeResponse)(nil), "konstellation.issue.QueryAllAddressFreezeResponse")
	proto.RegisterType((*QueryGetFreezeRequest)(nil), "konstellation.issue.QueryGetFreezeRequest")
	proto.RegisterType((*QueryGetFreezeResponse)(nil), "konstellation.issue.QueryGetFreezeResponse")
	proto.RegisterType((*QueryAllFreezeRequest)(nil), "konstellation.issue.QueryAllFreezeRequest")
	proto.RegisterType((*QueryAllFreezeResponse)(nil), "konstellation.issue.QueryAllFreezeResponse")
	proto.RegisterType((*QueryGetCoinsRequest)(nil), "konstellation.issue.QueryGetCoinsRequest")
	proto.RegisterType((*QueryGetCoinsResponse)(nil), "konstellation.issue.QueryGetCoinsResponse")
	proto.RegisterType((*QueryAllCoinsRequest)(nil), "konstellation.issue.QueryAllCoinsRequest")
	proto.RegisterType((*QueryAllCoinsResponse)(nil), "konstellation.issue.QueryAllCoinsResponse")
	proto.RegisterType((*QueryGetAllowanceListRequest)(nil), "konstellation.issue.QueryGetAllowanceListRequest")
	proto.RegisterType((*QueryGetAllowanceListResponse)(nil), "konstellation.issue.QueryGetAllowanceListResponse")
	proto.RegisterType((*QueryAllAllowanceListRequest)(nil), "konstellation.issue.QueryAllAllowanceListRequest")
	proto.RegisterType((*QueryAllAllowanceListResponse)(nil), "konstellation.issue.QueryAllAllowanceListResponse")
	proto.RegisterType((*QueryGetAllowanceRequest)(nil), "konstellation.issue.QueryGetAllowanceRequest")
	proto.RegisterType((*QueryGetAllowanceResponse)(nil), "konstellation.issue.QueryGetAllowanceResponse")
	proto.RegisterType((*QueryAllAllowanceRequest)(nil), "konstellation.issue.QueryAllAllowanceRequest")
	proto.RegisterType((*QueryAllAllowanceResponse)(nil), "konstellation.issue.QueryAllAllowanceResponse")
	proto.RegisterType((*QueryGetAddressRequest)(nil), "konstellation.issue.QueryGetAddressRequest")
	proto.RegisterType((*QueryGetAddressResponse)(nil), "konstellation.issue.QueryGetAddressResponse")
	proto.RegisterType((*QueryAllAddressRequest)(nil), "konstellation.issue.QueryAllAddressRequest")
	proto.RegisterType((*QueryAllAddressResponse)(nil), "konstellation.issue.QueryAllAddressResponse")
}

func init() { proto.RegisterFile("issue/query.proto", fileDescriptor_17ceab730567459d) }

var fileDescriptor_17ceab730567459d = []byte{
	// 1999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x9a, 0x4b, 0x6f, 0x1c, 0xc5,
	0x16, 0xc7, 0x53, 0xee, 0xc4, 0xb9, 0xa9, 0xbc, 0xae, 0x2b, 0x8f, 0xeb, 0x8c, 0x9d, 0x89, 0x5d,
	0x76, 0xfc, 0xf6, 0xb4, 0x1f, 0x49, 0xee, 0xcd, 0xd5, 0x95, 0x6e, 0x1c, 0x20, 0x21, 0xe2, 0xa1,
	0x64, 0x04, 0x0b, 0x58, 0x60, 0xda, 0x99, 0xb6, 0x33, 0xd0, 0x99, 0x9e, 0x4c, 0x8f, 0x09, 0xc1,
	0xf2, 0x06, 0x09, 0x21, 0x84, 0x78, 0x08, 0x04, 0x48, 0x91, 0x10, 0x8f, 0x08, 0x21, 0xde, 0x12,
	0x12, 0x20, 0xb1, 0x64, 0xc5, 0x32, 0x12, 0x1b, 0x96, 0x28, 0xe1, 0x83, 0xa0, 0xa9, 0x3e, 0x3d,
	0x5d, 0xd5, 0x5d, 0x55, 0x5d, 0x33, 0xf4, 0x6c, 0xa2, 0x4c, 0x55, 0x9d, 0xaa, 0xdf, 0xf9, 0x9f,
	0x7a, 0xf5, 0x29, 0xe3, 0x81, 0x6a, 0x10, 0x6c, 0xba, 0xf6, 0x8d, 0x4d, 0xb7, 0x71, 0xab, 0x54,
	0x6f, 0xf8, 0x4d, 0x9f, 0x1c, 0x7a, 0xde, 0xaf, 0x05, 0x4d, 0xd7, 0xf3, 0x9c, 0x66, 0xd5, 0xaf,
	0x95, 0x58, 0x83, 0xc2, 0xf0, 0x86, 0xef, 0x6f, 0x78, 0xae, 0xed, 0xd4, 0xab, 0xb6, 0x53, 0xab,
	0xf9, 0x4d, 0x56, 0x19, 0x84, 0x26, 0x85, 0x99, 0xab, 0x7e, 0x70, 0xdd, 0x0f, 0xec, 0x35, 0x27,
	0x80, 0xbe, 0xec, 0x17, 0x16, 0xd7, 0xdc, 0xa6, 0xb3, 0x68, 0xd7, 0x9d, 0x8d, 0x6a, 0x2d, 0xec,
	0x29, 0x6c, 0x7b, 0x3c, 0x1c, 0xf1, 0xaa, 0x5f, 0xad, 0xad, 0xb2, 0xff, 0xae, 0x56, 0xdc, 0x9a,
	0x7f, 0x3d, 0xea, 0x6a, 0x28, 0x55, 0xed, 0x55, 0x83, 0x26, 0x54, 0x1e, 0x0b, 0x2b, 0xd9, 0xbf,
	0xc1, 0x6a, 0xdd, 0x69, 0x38, 0x6d, 0xbb, 0x41, 0xae, 0x4a, 0xac, 0x29, 0xf0, 0x35, 0xeb, 0xae,
	0xd3, 0xdc, 0x6c, 0xb8, 0x51, 0x1d, 0x09, 0xeb, 0x84, 0xf6, 0x84, 0x1f, 0x04, 0xca, 0x86, 0xe5,
	0xd0, 0x50, 0x7b, 0x34, 0x59, 0x0b, 0xe5, 0x27, 0xc2, 0x72, 0xa7, 0x52, 0x69, 0xb8, 0x41, 0xb0,
	0xba, 0xde, 0x70, 0xdd, 0x97, 0x04, 0x7f, 0x0a, 0xb2, 0x06, 0x22, 0x86, 0x50, 0x36, 0x10, 0x0f,
	0x94, 0xf0, 0xce, 0xf1, 0x3c, 0xff, 0xa6, 0x53, 0xbb, 0x2a, 0x74, 0x7f, 0x24, 0x51, 0x07, 0xc5,
	0x87, 0x84, 0x51, 0xc3, 0x42, 0xba, 0x80, 0x8b, 0x57, 0x5a, 0x81, 0xbb, 0xe8, 0x36, 0x1f, 0xf0,
	0xab, 0xb5, 0x4b, 0xad, 0x26, 0x0f, 0xb2, 0xc0, 0x94, 0xdd, 0x1b, 0x9b, 0x6e, 0xd0, 0x24, 0x07,
	0x70, 0x5f, 0xb5, 0x32, 0x88, 0x46, 0xd0, 0xd4, 0xce, 0x72, 0x5f, 0xb5, 0x42, 0x6f, 0xe0, 0x13,
	0x4a, 0x8b, 0xa0, 0xee, 0xd7, 0x02, 0x97, 0x3c, 0x8e, 0x0f, 0x26, 0xaa, 0x98, 0xfd, 0xde, 0xa5,
	0xf1, 0x92, 0x64, 0x92, 0x95, 0x92, 0xdd, 0x24, 0x8d, 0xe9, 0x35, 0x80, 0x5c, 0xf1, 0x3c, 0x05,
	0xe4, 0x05, 0x8c, 0xe3, 0x19, 0x07, 0x83, 0x4d, 0x94, 0xc2, 0xe9, 0x59, 0x6a, 0x4d, 0xcf, 0x52,
	0x38, 0xd5, 0x61, 0x7a, 0x96, 0x2e, 0x3b, 0x1b, 0x2e, 0xd8, 0x96, 0x39, 0x4b, 0xfa, 0x33, 0x02,
	0xef, 0x64, 0x43, 0xe9, 0xbc, 0xb3, 0xba, 0xf6, 0x8e, 0x5c, 0x14, 0xd8, 0xfb, 0x18, 0xfb, 0x64,
	0x26, 0x7b, 0x08, 0x23, 0xc0, 0x97, 0xf0, 0x70, 0x2a, 0x32, 0x8f, 0x56, 0x83, 0xa6, 0x2a, 0x92,
	0x55, 0x7c, 0x5c, 0xd1, 0x1e, 0x3c, 0x7d, 0x18, 0xef, 0x17, 0x2a, 0x40, 0x58, 0xaa, 0xf7, 0x93,
	0x75, 0x21, 0x1a, 0xd2, 0x75, 0x40, 0xe3, 0x65, 0xe5, 0xd1, 0xf2, 0x8a, 0xdf, 0xf7, 0x08, 0x7c,
	0x4a, 0x0f, 0xa4, 0xf6, 0xc9, 0xea, 0xca, 0xa7, 0xfc, 0xe2, 0x36, 0x8f, 0x87, 0xa2, 0x38, 0xb0,
	0xde, 0x83, 0xcb, 0x6c, 0x5f, 0x52, 0x85, 0xcd, 0x8d, 0xc3, 0x2c, 0x36, 0x07, 0x0f, 0x1f, 0xc2,
	0xfb, 0xf8, 0x72, 0x50, 0x73, 0x54, 0xea, 0xa0, 0xd0, 0x81, 0x60, 0x46, 0x3f, 0x46, 0x80, 0xb5,
	0xe2, 0x79, 0x32, 0xac, 0x9c, 0x42, 0x46, 0xce, 0xe2, 0xfe, 0x70, 0x1f, 0x06, 0x09, 0x0d, 0x40,
	0xc1, 0x80, 0x7e, 0x8b, 0xe2, 0x69, 0x65, 0x28, 0x85, 0xd5, 0x85, 0x14, 0xf9, 0x45, 0x7a, 0x0e,
	0x17, 0x84, 0xd0, 0xe9, 0x03, 0xed, 0x24, 0xe6, 0x45, 0xc2, 0xb9, 0xf3, 0x78, 0x2f, 0x57, 0x0c,
	0x11, 0x18, 0x51, 0xfb, 0x06, 0xe6, 0xbc, 0x11, 0xad, 0x00, 0x50, 0x24, 0x60, 0x4f, 0x42, 0x4c,
	0xbf, 0x4c, 0x4e, 0xa5, 0x2c, 0x4f, 0xac, 0x8e, 0x3d, 0xe9, 0xc9, 0x2e, 0xca, 0xfa, 0xbf, 0x00,
	0x57, 0x07, 0x83, 0x5d, 0x34, 0xd1, 0x3e, 0xde, 0x71, 0x84, 0x0a, 0xed, 0x2e, 0x2a, 0x76, 0x21,
	0x1a, 0xf2, 0xbb, 0xa8, 0x14, 0xad, 0x17, 0xbb, 0xa8, 0xb1, 0x4f, 0x56, 0x57, 0x3e, 0xe5, 0x17,
	0xb7, 0x49, 0x7c, 0x24, 0x8a, 0x83, 0x7e, 0x59, 0x3d, 0x86, 0x8f, 0x26, 0x1b, 0x82, 0x57, 0xcb,
	0xb8, 0x5f, 0x58, 0x4c, 0x43, 0x52, 0x77, 0xa2, 0x4d, 0x08, 0x96, 0xd0, 0x2a, 0x8c, 0xbb, 0xe2,
	0x79, 0xbd, 0x59, 0x3d, 0xef, 0x23, 0x00, 0xe6, 0x46, 0x90, 0x00, 0x5b, 0x86, 0xc0, 0x3d, 0x51,
	0x3c, 0xdc, 0x2e, 0x0d, 0x14, 0x8f, 0x1a, 0xc6, 0x0e, 0x84, 0x25, 0x5a, 0xc5, 0xc1, 0x08, 0x9a,
	0xf2, 0x8a, 0x8b, 0xe3, 0xf6, 0x42, 0x71, 0x0d, 0xb0, 0x65, 0x08, 0x9c, 0x9f, 0xe2, 0xb6, 0xe4,
	0xc6, 0xc6, 0x6e, 0x91, 0x2a, 0xe5, 0xaf, 0xab, 0xae, 0xf7, 0x6d, 0x87, 0x1e, 0xc1, 0x07, 0xc4,
	0x1a, 0xd0, 0x6d, 0xcc, 0xe0, 0x32, 0x5b, 0x4e, 0x98, 0xd2, 0x0d, 0xc9, 0xed, 0x4b, 0xe0, 0xcb,
	0x2b, 0x42, 0x3f, 0x22, 0xd5, 0x27, 0x81, 0xd6, 0x31, 0xab, 0x4b, 0xc7, 0xf2, 0x8b, 0xe0, 0x39,
	0x3c, 0x98, 0x0a, 0x88, 0x22, 0x78, 0xe4, 0x30, 0xde, 0xc5, 0x3e, 0x37, 0xd9, 0x78, 0x7b, 0xca,
	0xe1, 0x0f, 0xfa, 0x14, 0x3e, 0x26, 0xe9, 0x01, 0x9c, 0xfe, 0x1f, 0xde, 0xd3, 0x2e, 0x04, 0x79,
	0x8b, 0x7a, 0x7f, 0xcb, 0xb1, 0x01, 0x5d, 0x03, 0x38, 0x5e, 0xd4, 0xbc, 0x23, 0xf7, 0x29, 0x02,
	0x7e, 0x71, 0x10, 0x39, 0xbf, 0xd5, 0x11, 0x7f, 0x7e, 0x51, 0x5a, 0xc2, 0x23, 0x91, 0xc6, 0x2b,
	0xe1, 0xe7, 0xf2, 0x05, 0xf6, 0x3d, 0xae, 0xfb, 0x9a, 0xba, 0x85, 0x47, 0x35, 0x36, 0xe0, 0xdf,
	0x13, 0x78, 0x20, 0x55, 0xd9, 0x16, 0x53, 0xe6, 0x67, 0xba, 0xab, 0x74, 0x07, 0xf4, 0x39, 0xc0,
	0x5d, 0xf1, 0x3c, 0x25, 0x6e, 0x5e, 0xf1, 0xfb, 0x05, 0x81, 0x9f, 0xf2, 0xc1, 0xf4, 0x7e, 0x5a,
	0x7f, 0xcb, 0xcf, 0x9e, 0xdc, 0xf1, 0x84, 0x51, 0x0c, 0xee, 0x78, 0x89, 0xf6, 0xf1, 0x7d, 0x48,
	0xa8, 0xd0, 0xde, 0xf1, 0xc4, 0x2e, 0x44, 0x43, 0xfe, 0x8e, 0x27, 0x45, 0xeb, 0xc5, 0x1d, 0xcf,
	0xd8, 0x27, 0xab, 0x2b, 0x9f, 0xf2, 0x8b, 0xdb, 0x93, 0xf1, 0x8d, 0x43, 0x1b, 0x30, 0xf9, 0xd6,
	0x49, 0x8e, 0xe2, 0xfe, 0x6b, 0xbe, 0x57, 0x71, 0x1b, 0x83, 0x16, 0x2b, 0x86, 0x5f, 0xfc, 0xfd,
	0x24, 0xa1, 0xc1, 0x32, 0xee, 0x17, 0x02, 0x2a, 0x3f, 0xee, 0xc1, 0x08, 0x9a, 0xd2, 0xcd, 0xf8,
	0x7e, 0xd2, 0x93, 0xd8, 0x29, 0x0e, 0x06, 0xfe, 0xd6, 0xa2, 0x71, 0xc3, 0x32, 0x74, 0x23, 0xbf,
	0xa8, 0x4d, 0xe0, 0xc3, 0xfc, 0x89, 0xa5, 0xbc, 0x26, 0x5e, 0x8a, 0xa3, 0x0b, 0xed, 0x00, 0x7f,
	0x01, 0xef, 0x62, 0x05, 0x20, 0x59, 0x41, 0x79, 0x22, 0x04, 0xe5, 0xb0, 0x21, 0x7d, 0x06, 0x86,
	0x84, 0x43, 0x26, 0xf7, 0x1b, 0xe2, 0x3b, 0x28, 0x8e, 0xb1, 0x92, 0xd5, 0x32, 0x62, 0xed, 0xcd,
	0xae, 0x16, 0xe5, 0x7e, 0x0d, 0xf3, 0x7f, 0x89, 0xf6, 0xdc, 0x0e, 0xc0, 0x57, 0xe8, 0x77, 0x35,
	0xa1, 0x0b, 0xd1, 0x50, 0xd8, 0xd5, 0x64, 0x68, 0x3d, 0xd9, 0xd5, 0x4c, 0x7d, 0xb2, 0xba, 0xf2,
	0x29, 0xbf, 0xb8, 0xd5, 0xe3, 0x3b, 0x61, 0x7b, 0x04, 0xcd, 0xc6, 0xe6, 0xdf, 0xac, 0xb9, 0x8d,
	0x68, 0xe9, 0xb3, 0x1f, 0x64, 0x10, 0xef, 0x0e, 0xea, 0x6e, 0x2d, 0xde, 0xd9, 0xa2, 0x9f, 0xf1,
	0x56, 0xb1, 0x53, 0x71, 0x87, 0xe4, 0x46, 0x8c, 0xef, 0x60, 0xed, 0x42, 0xed, 0x1d, 0x32, 0x36,
	0x8d, 0x0d, 0xe8, 0x9b, 0x28, 0xbe, 0x44, 0xa6, 0xbc, 0xc9, 0x71, 0x03, 0x94, 0xa8, 0xd0, 0xf6,
	0xd5, 0xe2, 0x7d, 0xe5, 0x2f, 0x9c, 0x99, 0xce, 0x5a, 0x1d, 0x39, 0x9b, 0xdf, 0x14, 0x98, 0x8a,
	0x4f, 0x20, 0x38, 0x3a, 0x55, 0x8b, 0xf6, 0x0a, 0xfe, 0x57, 0xaa, 0x25, 0xf8, 0x72, 0x06, 0xef,
	0x86, 0x22, 0x90, 0x76, 0x58, 0x77, 0x54, 0x97, 0xa3, 0xc6, 0xf4, 0xd9, 0xf8, 0xdc, 0x48, 0x0c,
	0x9e, 0xd7, 0xb2, 0xbc, 0x8d, 0x80, 0x9a, 0x1f, 0x42, 0x46, 0x6d, 0x19, 0x53, 0xe7, 0xa6, 0xfd,
	0xd2, 0x9d, 0x29, 0xbc, 0x8b, 0xc1, 0x91, 0xef, 0x50, 0xea, 0x69, 0x87, 0x2c, 0x4b, 0x69, 0xf4,
	0x6f, 0x66, 0x85, 0x53, 0x9d, 0x19, 0x85, 0x50, 0x74, 0xf1, 0xe5, 0xdf, 0xfe, 0x7c, 0xb7, 0x6f,
	0x96, 0x4c, 0xdb, 0x82, 0xb5, 0x1d, 0xbf, 0xfe, 0x71, 0x56, 0xf6, 0x56, 0xb5, 0xb2, 0x4d, 0xbe,
	0x41, 0x98, 0x24, 0xba, 0x5b, 0xf1, 0x3c, 0x1d, 0xb4, 0xf2, 0x0d, 0x4d, 0x07, 0xad, 0x7e, 0x0d,
	0xa3, 0x73, 0x0c, 0x7a, 0x82, 0x8c, 0x9b, 0x40, 0x93, 0xcf, 0x51, 0xe2, 0xf9, 0x85, 0x2c, 0x9a,
	0x49, 0xc5, 0x1d, 0x16, 0x85, 0xa5, 0x4e, 0x4c, 0x00, 0xd3, 0x66, 0x98, 0xd3, 0x64, 0x52, 0x8f,
	0xd9, 0xb2, 0x09, 0x95, 0xfd, 0x0c, 0xe1, 0x7f, 0x0a, 0x5d, 0xb5, 0x74, 0x5d, 0x34, 0x93, 0xc8,
	0x10, 0x56, 0xf5, 0x46, 0x45, 0x67, 0x18, 0xec, 0x38, 0xa1, 0xd9, 0xb0, 0xe4, 0x0e, 0x12, 0xdf,
	0x38, 0xc8, 0x82, 0x56, 0x1d, 0xc9, 0x4b, 0x4e, 0x61, 0xb1, 0x03, 0x0b, 0x20, 0x2c, 0x31, 0xc2,
	0x29, 0x32, 0x21, 0x25, 0xac, 0x72, 0x26, 0xa1, 0x9a, 0x9f, 0x20, 0x7c, 0x90, 0xef, 0xa8, 0x25,
	0xe6, 0x82, 0x56, 0x99, 0x0e, 0x41, 0x15, 0x2f, 0x40, 0x74, 0x9a, 0x81, 0x8e, 0x91, 0xd1, 0x4c,
	0x50, 0xf2, 0x11, 0x12, 0x9e, 0x21, 0x88, 0x9d, 0x2d, 0x8b, 0x88, 0xb7, 0x60, 0x6e, 0x00, 0x74,
	0xf3, 0x8c, 0x6e, 0x92, 0x9c, 0x54, 0xd3, 0xf1, 0x2a, 0x7e, 0x88, 0xf0, 0x01, 0xae, 0x9b, 0x96,
	0x88, 0x76, 0xb6, 0x24, 0xc6, 0x90, 0xf2, 0xd7, 0x19, 0x3a, 0xc5, 0x20, 0x29, 0x19, 0xc9, 0x82,
	0x64, 0xab, 0x5b, 0xcc, 0xee, 0x1b, 0x4c, 0xad, 0xc4, 0x23, 0x46, 0xc6, 0xea, 0x96, 0x3e, 0x47,
	0x64, 0xac, 0xee, 0x2a, 0x6f, 0x13, 0xaf, 0x6e, 0xa1, 0xab, 0xec, 0xd5, 0xdd, 0x29, 0xac, 0xea,
	0xed, 0x24, 0x63, 0x75, 0x0b, 0xb0, 0xe4, 0x75, 0x14, 0x65, 0xf8, 0xc9, 0x8c, 0x56, 0x17, 0x31,
	0xc8, 0xb3, 0x46, 0x6d, 0x8d, 0xe2, 0x5b, 0xe7, 0xe6, 0xdf, 0x6b, 0x08, 0xef, 0x89, 0xa7, 0xde,
	0x8c, 0xd6, 0x77, 0x63, 0xa0, 0xd4, 0xab, 0x06, 0x1d, 0x63, 0x40, 0xc7, 0xc9, 0x90, 0x06, 0x88,
	0x29, 0x03, 0xe9, 0xf5, 0x19, 0x83, 0xfd, 0xcb, 0x4c, 0x19, 0x31, 0xd9, 0x6f, 0x32, 0xf3, 0x39,
	0x65, 0x42, 0xe3, 0x6c, 0x65, 0x8c, 0x81, 0x52, 0xaf, 0x0f, 0x19, 0xca, 0x84, 0x40, 0xe4, 0x2b,
	0x94, 0xcc, 0x7c, 0x93, 0xa5, 0x0e, 0xee, 0x23, 0x11, 0xd8, 0x72, 0x47, 0x36, 0x00, 0xb8, 0xc0,
	0x00, 0x67, 0xc8, 0x94, 0xc1, 0x6d, 0x20, 0x54, 0xee, 0x0b, 0x84, 0x07, 0xc4, 0xce, 0x5a, 0x0a,
	0x2e, 0x75, 0x70, 0x17, 0x31, 0x00, 0x56, 0xbe, 0x12, 0xd0, 0x59, 0x06, 0x7c, 0x92, 0x8c, 0x19,
	0x00, 0x93, 0xdb, 0x88, 0x4b, 0x4f, 0x93, 0x79, 0x33, 0x81, 0x22, 0xbc, 0x92, 0x69, 0x73, 0xa3,
	0x23, 0xb6, 0x4d, 0x66, 0x6f, 0xb1, 0xcf, 0x9c, 0x6d, 0xf2, 0x1e, 0xc2, 0xfb, 0xda, 0xbd, 0xb4,
	0x34, 0x9c, 0x37, 0xd3, 0xc3, 0x80, 0x4f, 0x96, 0xaa, 0xa7, 0x13, 0x8c, 0x6f, 0x84, 0x14, 0xf5,
	0x7c, 0xe4, 0x27, 0x24, 0xc9, 0x05, 0x93, 0xd3, 0x5a, 0x35, 0x54, 0x59, 0xec, 0xc2, 0x99, 0x4e,
	0xcd, 0x00, 0x76, 0x99, 0xc1, 0xce, 0x93, 0x59, 0x29, 0xac, 0x93, 0xb4, 0x0b, 0xa7, 0xe6, 0x0f,
	0x08, 0x1f, 0x4e, 0x75, 0xd9, 0x52, 0xf6, 0xb4, 0x56, 0xaa, 0x6e, 0xe0, 0x75, 0xc9, 0xf4, 0x8c,
	0x99, 0x90, 0x82, 0x6f, 0x29, 0x9e, 0x48, 0xc0, 0x2e, 0x9a, 0xcb, 0x66, 0x76, 0x0c, 0x4b, 0x33,
	0xc6, 0xf4, 0xff, 0x0c, 0xf4, 0x2c, 0xf9, 0x77, 0x02, 0x54, 0xfc, 0xf5, 0xa2, 0x0c, 0x3c, 0x3e,
	0x96, 0x85, 0xae, 0xb3, 0x8f, 0xe5, 0x4e, 0xe1, 0x55, 0xe9, 0xee, 0x8c, 0x63, 0x59, 0x80, 0x25,
	0x1f, 0xa0, 0x28, 0xa1, 0x9a, 0x71, 0xf8, 0x88, 0x58, 0xb3, 0x46, 0x6d, 0x81, 0xe7, 0x14, 0xe3,
	0x29, 0x91, 0x39, 0x29, 0xcf, 0x3a, 0xa8, 0x16, 0x2e, 0x7e, 0x7b, 0x2b, 0xcc, 0x64, 0x87, 0x07,
	0x51, 0x2c, 0x9d, 0xfe, 0x20, 0x32, 0x86, 0x4b, 0x25, 0x94, 0x33, 0x0e, 0xa2, 0x10, 0x8e, 0xbc,
	0x8a, 0x20, 0x17, 0x4a, 0xa6, 0x33, 0xf7, 0xbe, 0xf6, 0x79, 0x38, 0x63, 0xd2, 0x14, 0x28, 0x26,
	0x19, 0xc5, 0x28, 0x39, 0xa1, 0xdc, 0x82, 0xe0, 0x78, 0x7e, 0x05, 0xe1, 0x7f, 0x30, 0xd3, 0x96,
	0x28, 0xd3, 0x99, 0x1b, 0x9d, 0x09, 0x4c, 0x32, 0xf1, 0x4b, 0x29, 0x83, 0x19, 0x26, 0x05, 0x35,
	0x0c, 0xbb, 0x20, 0x8b, 0x49, 0xc4, 0x8c, 0x95, 0x29, 0xc9, 0x95, 0x66, 0xad, 0x4c, 0x59, 0xd6,
	0x33, 0xe3, 0x82, 0xec, 0xf0, 0x36, 0xdc, 0x4a, 0xe4, 0x8b, 0x0d, 0x56, 0x62, 0x87, 0xb0, 0xaa,
	0x14, 0x6d, 0xd6, 0x4a, 0x14, 0xf4, 0xfb, 0x1a, 0x71, 0x09, 0xbc, 0x8c, 0x23, 0x39, 0x99, 0x8e,
	0xcc, 0x38, 0x92, 0x53, 0xc9, 0x42, 0x7a, 0x8e, 0x81, 0xfd, 0x97, 0xfc, 0x47, 0x0f, 0x66, 0x6f,
	0xb1, 0x7c, 0xe4, 0xb6, 0xbd, 0x05, 0x59, 0xd8, 0x6d, 0xe1, 0x90, 0x6e, 0xf7, 0x9b, 0x7d, 0x48,
	0x77, 0x42, 0x2c, 0x4b, 0x6f, 0x66, 0x1c, 0xd2, 0x6d, 0x62, 0xf2, 0x16, 0x6a, 0x67, 0xe1, 0xc8,
	0xac, 0xc9, 0xce, 0x1f, 0x01, 0xcd, 0x99, 0x35, 0x36, 0xfa, 0x1a, 0x87, 0x3d, 0x36, 0x9c, 0x80,
	0x6f, 0x20, 0x8c, 0xc1, 0xbc, 0xa5, 0xd3, 0xac, 0xc9, 0x8e, 0x6e, 0x00, 0x95, 0x4e, 0x40, 0xd2,
	0x71, 0x06, 0x55, 0x24, 0xc3, 0x3a, 0xa8, 0xf3, 0x93, 0xbf, 0xde, 0x2b, 0xa2, 0xbb, 0xf7, 0x8a,
	0xe8, 0x8f, 0x7b, 0x45, 0xf4, 0xf6, 0xfd, 0xe2, 0x8e, 0xbb, 0xf7, 0x8b, 0x3b, 0x7e, 0xbf, 0x5f,
	0xdc, 0xf1, 0xf4, 0xfe, 0xe8, 0x40, 0x6b, 0xde, 0xaa, 0xbb, 0xc1, 0x5a, 0x3f, 0xfb, 0xc3, 0xfa,
	0xe5, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x48, 0x41, 0x34, 0x63, 0x31, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a coinIssueDenoms by id.
	CoinIssueDenoms(ctx context.Context, in *QueryGetCoinIssueDenomsRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueDenomsResponse, error)
	// Queries a list of coinIssueDenoms items.
	CoinIssueDenomsAll(ctx context.Context, in *QueryAllCoinIssueDenomsRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueDenomsResponse, error)
	// Queries a coinIssueList by id.
	CoinIssueList(ctx context.Context, in *QueryGetCoinIssueListRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueListResponse, error)
	// Queries a list of coinIssueList items.
	CoinIssueListAll(ctx context.Context, in *QueryAllCoinIssueListRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueListResponse, error)
	// Queries a issuesParams by id.
	IssuesParams(ctx context.Context, in *QueryGetIssuesParamsRequest, opts ...grpc.CallOption) (*QueryGetIssuesParamsResponse, error)
	// Queries a list of issuesParams items.
	IssuesParamsAll(ctx context.Context, in *QueryAllIssuesParamsRequest, opts ...grpc.CallOption) (*QueryAllIssuesParamsResponse, error)
	// Queries a issueParams by id.
	IssueParams(ctx context.Context, in *QueryGetIssueParamsRequest, opts ...grpc.CallOption) (*QueryGetIssueParamsResponse, error)
	// Queries a list of issueParams items.
	IssueParamsAll(ctx context.Context, in *QueryAllIssueParamsRequest, opts ...grpc.CallOption) (*QueryAllIssueParamsResponse, error)
	// Queries a issueFeatures by id.
	IssueFeatures(ctx context.Context, in *QueryGetIssueFeaturesRequest, opts ...grpc.CallOption) (*QueryGetIssueFeaturesResponse, error)
	// Queries a list of issueFeatures items.
	IssueFeaturesAll(ctx context.Context, in *QueryAllIssueFeaturesRequest, opts ...grpc.CallOption) (*QueryAllIssueFeaturesResponse, error)
	// Queries a params by id.
	Params(ctx context.Context, in *QueryGetParamsRequest, opts ...grpc.CallOption) (*QueryGetParamsResponse, error)
	// Queries a list of params items.
	ParamsAll(ctx context.Context, in *QueryAllParamsRequest, opts ...grpc.CallOption) (*QueryAllParamsResponse, error)
	// Queries a issues by id.
	Issues(ctx context.Context, in *QueryGetIssuesRequest, opts ...grpc.CallOption) (*QueryGetIssuesResponse, error)
	// Queries a list of issues items.
	IssuesAll(ctx context.Context, in *QueryAllIssuesRequest, opts ...grpc.CallOption) (*QueryAllIssuesResponse, error)
	// Queries a coinIssueDenom by id.
	CoinIssueDenom(ctx context.Context, in *QueryGetCoinIssueDenomRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueDenomResponse, error)
	// Queries a list of coinIssueDenom items.
	CoinIssueDenomAll(ctx context.Context, in *QueryAllCoinIssueDenomRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueDenomResponse, error)
	// Queries a coinIssue by id.
	CoinIssue(ctx context.Context, in *QueryGetCoinIssueRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueResponse, error)
	// Queries a list of coinIssue items.
	CoinIssueAll(ctx context.Context, in *QueryAllCoinIssueRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueResponse, error)
	// Queries a addressFreezeList by id.
	AddressFreezeList(ctx context.Context, in *QueryGetAddressFreezeListRequest, opts ...grpc.CallOption) (*QueryGetAddressFreezeListResponse, error)
	// Queries a list of addressFreezeList items.
	AddressFreezeListAll(ctx context.Context, in *QueryAllAddressFreezeListRequest, opts ...grpc.CallOption) (*QueryAllAddressFreezeListResponse, error)
	// Queries a addressFreeze by id.
	AddressFreeze(ctx context.Context, in *QueryGetAddressFreezeRequest, opts ...grpc.CallOption) (*QueryGetAddressFreezeResponse, error)
	// Queries a list of addressFreeze items.
	AddressFreezeAll(ctx context.Context, in *QueryAllAddressFreezeRequest, opts ...grpc.CallOption) (*QueryAllAddressFreezeResponse, error)
	// Queries a freeze by id.
	Freeze(ctx context.Context, in *QueryGetFreezeRequest, opts ...grpc.CallOption) (*QueryGetFreezeResponse, error)
	// Queries a list of freeze items.
	FreezeAll(ctx context.Context, in *QueryAllFreezeRequest, opts ...grpc.CallOption) (*QueryAllFreezeResponse, error)
	// Queries a coins by id.
	Coins(ctx context.Context, in *QueryGetCoinsRequest, opts ...grpc.CallOption) (*QueryGetCoinsResponse, error)
	// Queries a list of coins items.
	CoinsAll(ctx context.Context, in *QueryAllCoinsRequest, opts ...grpc.CallOption) (*QueryAllCoinsResponse, error)
	// Queries a allowanceList by id.
	AllowanceList(ctx context.Context, in *QueryGetAllowanceListRequest, opts ...grpc.CallOption) (*QueryGetAllowanceListResponse, error)
	// Queries a list of allowanceList items.
	AllowanceListAll(ctx context.Context, in *QueryAllAllowanceListRequest, opts ...grpc.CallOption) (*QueryAllAllowanceListResponse, error)
	// Queries a allowance by id.
	Allowance(ctx context.Context, in *QueryGetAllowanceRequest, opts ...grpc.CallOption) (*QueryGetAllowanceResponse, error)
	// Queries a list of allowance items.
	AllowanceAll(ctx context.Context, in *QueryAllAllowanceRequest, opts ...grpc.CallOption) (*QueryAllAllowanceResponse, error)
	// Queries a address by id.
	Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryGetAddressResponse, error)
	// Queries a list of address items.
	AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CoinIssueDenoms(ctx context.Context, in *QueryGetCoinIssueDenomsRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueDenomsResponse, error) {
	out := new(QueryGetCoinIssueDenomsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueDenomsAll(ctx context.Context, in *QueryAllCoinIssueDenomsRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueDenomsResponse, error) {
	out := new(QueryAllCoinIssueDenomsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueDenomsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueList(ctx context.Context, in *QueryGetCoinIssueListRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueListResponse, error) {
	out := new(QueryGetCoinIssueListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueListAll(ctx context.Context, in *QueryAllCoinIssueListRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueListResponse, error) {
	out := new(QueryAllCoinIssueListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuesParams(ctx context.Context, in *QueryGetIssuesParamsRequest, opts ...grpc.CallOption) (*QueryGetIssuesParamsResponse, error) {
	out := new(QueryGetIssuesParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssuesParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuesParamsAll(ctx context.Context, in *QueryAllIssuesParamsRequest, opts ...grpc.CallOption) (*QueryAllIssuesParamsResponse, error) {
	out := new(QueryAllIssuesParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssuesParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueParams(ctx context.Context, in *QueryGetIssueParamsRequest, opts ...grpc.CallOption) (*QueryGetIssueParamsResponse, error) {
	out := new(QueryGetIssueParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssueParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueParamsAll(ctx context.Context, in *QueryAllIssueParamsRequest, opts ...grpc.CallOption) (*QueryAllIssueParamsResponse, error) {
	out := new(QueryAllIssueParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssueParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueFeatures(ctx context.Context, in *QueryGetIssueFeaturesRequest, opts ...grpc.CallOption) (*QueryGetIssueFeaturesResponse, error) {
	out := new(QueryGetIssueFeaturesResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssueFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueFeaturesAll(ctx context.Context, in *QueryAllIssueFeaturesRequest, opts ...grpc.CallOption) (*QueryAllIssueFeaturesResponse, error) {
	out := new(QueryAllIssueFeaturesResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssueFeaturesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryGetParamsRequest, opts ...grpc.CallOption) (*QueryGetParamsResponse, error) {
	out := new(QueryGetParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParamsAll(ctx context.Context, in *QueryAllParamsRequest, opts ...grpc.CallOption) (*QueryAllParamsResponse, error) {
	out := new(QueryAllParamsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/ParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Issues(ctx context.Context, in *QueryGetIssuesRequest, opts ...grpc.CallOption) (*QueryGetIssuesResponse, error) {
	out := new(QueryGetIssuesResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Issues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuesAll(ctx context.Context, in *QueryAllIssuesRequest, opts ...grpc.CallOption) (*QueryAllIssuesResponse, error) {
	out := new(QueryAllIssuesResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/IssuesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueDenom(ctx context.Context, in *QueryGetCoinIssueDenomRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueDenomResponse, error) {
	out := new(QueryGetCoinIssueDenomResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueDenomAll(ctx context.Context, in *QueryAllCoinIssueDenomRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueDenomResponse, error) {
	out := new(QueryAllCoinIssueDenomResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueDenomAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssue(ctx context.Context, in *QueryGetCoinIssueRequest, opts ...grpc.CallOption) (*QueryGetCoinIssueResponse, error) {
	out := new(QueryGetCoinIssueResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinIssueAll(ctx context.Context, in *QueryAllCoinIssueRequest, opts ...grpc.CallOption) (*QueryAllCoinIssueResponse, error) {
	out := new(QueryAllCoinIssueResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinIssueAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFreezeList(ctx context.Context, in *QueryGetAddressFreezeListRequest, opts ...grpc.CallOption) (*QueryGetAddressFreezeListResponse, error) {
	out := new(QueryGetAddressFreezeListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AddressFreezeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFreezeListAll(ctx context.Context, in *QueryAllAddressFreezeListRequest, opts ...grpc.CallOption) (*QueryAllAddressFreezeListResponse, error) {
	out := new(QueryAllAddressFreezeListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AddressFreezeListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFreeze(ctx context.Context, in *QueryGetAddressFreezeRequest, opts ...grpc.CallOption) (*QueryGetAddressFreezeResponse, error) {
	out := new(QueryGetAddressFreezeResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AddressFreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFreezeAll(ctx context.Context, in *QueryAllAddressFreezeRequest, opts ...grpc.CallOption) (*QueryAllAddressFreezeResponse, error) {
	out := new(QueryAllAddressFreezeResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AddressFreezeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Freeze(ctx context.Context, in *QueryGetFreezeRequest, opts ...grpc.CallOption) (*QueryGetFreezeResponse, error) {
	out := new(QueryGetFreezeResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Freeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FreezeAll(ctx context.Context, in *QueryAllFreezeRequest, opts ...grpc.CallOption) (*QueryAllFreezeResponse, error) {
	out := new(QueryAllFreezeResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/FreezeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Coins(ctx context.Context, in *QueryGetCoinsRequest, opts ...grpc.CallOption) (*QueryGetCoinsResponse, error) {
	out := new(QueryGetCoinsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Coins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinsAll(ctx context.Context, in *QueryAllCoinsRequest, opts ...grpc.CallOption) (*QueryAllCoinsResponse, error) {
	out := new(QueryAllCoinsResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/CoinsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowanceList(ctx context.Context, in *QueryGetAllowanceListRequest, opts ...grpc.CallOption) (*QueryGetAllowanceListResponse, error) {
	out := new(QueryGetAllowanceListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AllowanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowanceListAll(ctx context.Context, in *QueryAllAllowanceListRequest, opts ...grpc.CallOption) (*QueryAllAllowanceListResponse, error) {
	out := new(QueryAllAllowanceListResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AllowanceListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Allowance(ctx context.Context, in *QueryGetAllowanceRequest, opts ...grpc.CallOption) (*QueryGetAllowanceResponse, error) {
	out := new(QueryGetAllowanceResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Allowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowanceAll(ctx context.Context, in *QueryAllAllowanceRequest, opts ...grpc.CallOption) (*QueryAllAllowanceResponse, error) {
	out := new(QueryAllAllowanceResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AllowanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryGetAddressResponse, error) {
	out := new(QueryGetAddressResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error) {
	out := new(QueryAllAddressResponse)
	err := c.cc.Invoke(ctx, "/konstellation.issue.Query/AddressAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a coinIssueDenoms by id.
	CoinIssueDenoms(context.Context, *QueryGetCoinIssueDenomsRequest) (*QueryGetCoinIssueDenomsResponse, error)
	// Queries a list of coinIssueDenoms items.
	CoinIssueDenomsAll(context.Context, *QueryAllCoinIssueDenomsRequest) (*QueryAllCoinIssueDenomsResponse, error)
	// Queries a coinIssueList by id.
	CoinIssueList(context.Context, *QueryGetCoinIssueListRequest) (*QueryGetCoinIssueListResponse, error)
	// Queries a list of coinIssueList items.
	CoinIssueListAll(context.Context, *QueryAllCoinIssueListRequest) (*QueryAllCoinIssueListResponse, error)
	// Queries a issuesParams by id.
	IssuesParams(context.Context, *QueryGetIssuesParamsRequest) (*QueryGetIssuesParamsResponse, error)
	// Queries a list of issuesParams items.
	IssuesParamsAll(context.Context, *QueryAllIssuesParamsRequest) (*QueryAllIssuesParamsResponse, error)
	// Queries a issueParams by id.
	IssueParams(context.Context, *QueryGetIssueParamsRequest) (*QueryGetIssueParamsResponse, error)
	// Queries a list of issueParams items.
	IssueParamsAll(context.Context, *QueryAllIssueParamsRequest) (*QueryAllIssueParamsResponse, error)
	// Queries a issueFeatures by id.
	IssueFeatures(context.Context, *QueryGetIssueFeaturesRequest) (*QueryGetIssueFeaturesResponse, error)
	// Queries a list of issueFeatures items.
	IssueFeaturesAll(context.Context, *QueryAllIssueFeaturesRequest) (*QueryAllIssueFeaturesResponse, error)
	// Queries a params by id.
	Params(context.Context, *QueryGetParamsRequest) (*QueryGetParamsResponse, error)
	// Queries a list of params items.
	ParamsAll(context.Context, *QueryAllParamsRequest) (*QueryAllParamsResponse, error)
	// Queries a issues by id.
	Issues(context.Context, *QueryGetIssuesRequest) (*QueryGetIssuesResponse, error)
	// Queries a list of issues items.
	IssuesAll(context.Context, *QueryAllIssuesRequest) (*QueryAllIssuesResponse, error)
	// Queries a coinIssueDenom by id.
	CoinIssueDenom(context.Context, *QueryGetCoinIssueDenomRequest) (*QueryGetCoinIssueDenomResponse, error)
	// Queries a list of coinIssueDenom items.
	CoinIssueDenomAll(context.Context, *QueryAllCoinIssueDenomRequest) (*QueryAllCoinIssueDenomResponse, error)
	// Queries a coinIssue by id.
	CoinIssue(context.Context, *QueryGetCoinIssueRequest) (*QueryGetCoinIssueResponse, error)
	// Queries a list of coinIssue items.
	CoinIssueAll(context.Context, *QueryAllCoinIssueRequest) (*QueryAllCoinIssueResponse, error)
	// Queries a addressFreezeList by id.
	AddressFreezeList(context.Context, *QueryGetAddressFreezeListRequest) (*QueryGetAddressFreezeListResponse, error)
	// Queries a list of addressFreezeList items.
	AddressFreezeListAll(context.Context, *QueryAllAddressFreezeListRequest) (*QueryAllAddressFreezeListResponse, error)
	// Queries a addressFreeze by id.
	AddressFreeze(context.Context, *QueryGetAddressFreezeRequest) (*QueryGetAddressFreezeResponse, error)
	// Queries a list of addressFreeze items.
	AddressFreezeAll(context.Context, *QueryAllAddressFreezeRequest) (*QueryAllAddressFreezeResponse, error)
	// Queries a freeze by id.
	Freeze(context.Context, *QueryGetFreezeRequest) (*QueryGetFreezeResponse, error)
	// Queries a list of freeze items.
	FreezeAll(context.Context, *QueryAllFreezeRequest) (*QueryAllFreezeResponse, error)
	// Queries a coins by id.
	Coins(context.Context, *QueryGetCoinsRequest) (*QueryGetCoinsResponse, error)
	// Queries a list of coins items.
	CoinsAll(context.Context, *QueryAllCoinsRequest) (*QueryAllCoinsResponse, error)
	// Queries a allowanceList by id.
	AllowanceList(context.Context, *QueryGetAllowanceListRequest) (*QueryGetAllowanceListResponse, error)
	// Queries a list of allowanceList items.
	AllowanceListAll(context.Context, *QueryAllAllowanceListRequest) (*QueryAllAllowanceListResponse, error)
	// Queries a allowance by id.
	Allowance(context.Context, *QueryGetAllowanceRequest) (*QueryGetAllowanceResponse, error)
	// Queries a list of allowance items.
	AllowanceAll(context.Context, *QueryAllAllowanceRequest) (*QueryAllAllowanceResponse, error)
	// Queries a address by id.
	Address(context.Context, *QueryGetAddressRequest) (*QueryGetAddressResponse, error)
	// Queries a list of address items.
	AddressAll(context.Context, *QueryAllAddressRequest) (*QueryAllAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CoinIssueDenoms(ctx context.Context, req *QueryGetCoinIssueDenomsRequest) (*QueryGetCoinIssueDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueDenoms not implemented")
}
func (*UnimplementedQueryServer) CoinIssueDenomsAll(ctx context.Context, req *QueryAllCoinIssueDenomsRequest) (*QueryAllCoinIssueDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueDenomsAll not implemented")
}
func (*UnimplementedQueryServer) CoinIssueList(ctx context.Context, req *QueryGetCoinIssueListRequest) (*QueryGetCoinIssueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueList not implemented")
}
func (*UnimplementedQueryServer) CoinIssueListAll(ctx context.Context, req *QueryAllCoinIssueListRequest) (*QueryAllCoinIssueListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueListAll not implemented")
}
func (*UnimplementedQueryServer) IssuesParams(ctx context.Context, req *QueryGetIssuesParamsRequest) (*QueryGetIssuesParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuesParams not implemented")
}
func (*UnimplementedQueryServer) IssuesParamsAll(ctx context.Context, req *QueryAllIssuesParamsRequest) (*QueryAllIssuesParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuesParamsAll not implemented")
}
func (*UnimplementedQueryServer) IssueParams(ctx context.Context, req *QueryGetIssueParamsRequest) (*QueryGetIssueParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueParams not implemented")
}
func (*UnimplementedQueryServer) IssueParamsAll(ctx context.Context, req *QueryAllIssueParamsRequest) (*QueryAllIssueParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueParamsAll not implemented")
}
func (*UnimplementedQueryServer) IssueFeatures(ctx context.Context, req *QueryGetIssueFeaturesRequest) (*QueryGetIssueFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueFeatures not implemented")
}
func (*UnimplementedQueryServer) IssueFeaturesAll(ctx context.Context, req *QueryAllIssueFeaturesRequest) (*QueryAllIssueFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueFeaturesAll not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryGetParamsRequest) (*QueryGetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ParamsAll(ctx context.Context, req *QueryAllParamsRequest) (*QueryAllParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamsAll not implemented")
}
func (*UnimplementedQueryServer) Issues(ctx context.Context, req *QueryGetIssuesRequest) (*QueryGetIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issues not implemented")
}
func (*UnimplementedQueryServer) IssuesAll(ctx context.Context, req *QueryAllIssuesRequest) (*QueryAllIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuesAll not implemented")
}
func (*UnimplementedQueryServer) CoinIssueDenom(ctx context.Context, req *QueryGetCoinIssueDenomRequest) (*QueryGetCoinIssueDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueDenom not implemented")
}
func (*UnimplementedQueryServer) CoinIssueDenomAll(ctx context.Context, req *QueryAllCoinIssueDenomRequest) (*QueryAllCoinIssueDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueDenomAll not implemented")
}
func (*UnimplementedQueryServer) CoinIssue(ctx context.Context, req *QueryGetCoinIssueRequest) (*QueryGetCoinIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssue not implemented")
}
func (*UnimplementedQueryServer) CoinIssueAll(ctx context.Context, req *QueryAllCoinIssueRequest) (*QueryAllCoinIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinIssueAll not implemented")
}
func (*UnimplementedQueryServer) AddressFreezeList(ctx context.Context, req *QueryGetAddressFreezeListRequest) (*QueryGetAddressFreezeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFreezeList not implemented")
}
func (*UnimplementedQueryServer) AddressFreezeListAll(ctx context.Context, req *QueryAllAddressFreezeListRequest) (*QueryAllAddressFreezeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFreezeListAll not implemented")
}
func (*UnimplementedQueryServer) AddressFreeze(ctx context.Context, req *QueryGetAddressFreezeRequest) (*QueryGetAddressFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFreeze not implemented")
}
func (*UnimplementedQueryServer) AddressFreezeAll(ctx context.Context, req *QueryAllAddressFreezeRequest) (*QueryAllAddressFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFreezeAll not implemented")
}
func (*UnimplementedQueryServer) Freeze(ctx context.Context, req *QueryGetFreezeRequest) (*QueryGetFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Freeze not implemented")
}
func (*UnimplementedQueryServer) FreezeAll(ctx context.Context, req *QueryAllFreezeRequest) (*QueryAllFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeAll not implemented")
}
func (*UnimplementedQueryServer) Coins(ctx context.Context, req *QueryGetCoinsRequest) (*QueryGetCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Coins not implemented")
}
func (*UnimplementedQueryServer) CoinsAll(ctx context.Context, req *QueryAllCoinsRequest) (*QueryAllCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinsAll not implemented")
}
func (*UnimplementedQueryServer) AllowanceList(ctx context.Context, req *QueryGetAllowanceListRequest) (*QueryGetAllowanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowanceList not implemented")
}
func (*UnimplementedQueryServer) AllowanceListAll(ctx context.Context, req *QueryAllAllowanceListRequest) (*QueryAllAllowanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowanceListAll not implemented")
}
func (*UnimplementedQueryServer) Allowance(ctx context.Context, req *QueryGetAllowanceRequest) (*QueryGetAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allowance not implemented")
}
func (*UnimplementedQueryServer) AllowanceAll(ctx context.Context, req *QueryAllAllowanceRequest) (*QueryAllAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowanceAll not implemented")
}
func (*UnimplementedQueryServer) Address(ctx context.Context, req *QueryGetAddressRequest) (*QueryGetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (*UnimplementedQueryServer) AddressAll(ctx context.Context, req *QueryAllAddressRequest) (*QueryAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CoinIssueDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoinIssueDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueDenoms(ctx, req.(*QueryGetCoinIssueDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueDenomsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoinIssueDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueDenomsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueDenomsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueDenomsAll(ctx, req.(*QueryAllCoinIssueDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoinIssueListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueList(ctx, req.(*QueryGetCoinIssueListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoinIssueListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueListAll(ctx, req.(*QueryAllCoinIssueListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuesParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssuesParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuesParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssuesParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuesParams(ctx, req.(*QueryGetIssuesParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuesParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssuesParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuesParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssuesParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuesParamsAll(ctx, req.(*QueryAllIssuesParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssueParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssueParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueParams(ctx, req.(*QueryGetIssueParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssueParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssueParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueParamsAll(ctx, req.(*QueryAllIssueParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssueFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssueFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueFeatures(ctx, req.(*QueryGetIssueFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueFeaturesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssueFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueFeaturesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssueFeaturesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueFeaturesAll(ctx, req.(*QueryAllIssueFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryGetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/ParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParamsAll(ctx, req.(*QueryAllParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Issues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Issues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Issues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Issues(ctx, req.(*QueryGetIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/IssuesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuesAll(ctx, req.(*QueryAllIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoinIssueDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueDenom(ctx, req.(*QueryGetCoinIssueDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueDenomAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoinIssueDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueDenomAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueDenomAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueDenomAll(ctx, req.(*QueryAllCoinIssueDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoinIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssue(ctx, req.(*QueryGetCoinIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinIssueAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoinIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinIssueAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinIssueAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinIssueAll(ctx, req.(*QueryAllCoinIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFreezeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressFreezeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFreezeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AddressFreezeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFreezeList(ctx, req.(*QueryGetAddressFreezeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFreezeListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressFreezeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFreezeListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AddressFreezeListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFreezeListAll(ctx, req.(*QueryAllAddressFreezeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AddressFreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFreeze(ctx, req.(*QueryGetAddressFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFreezeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFreezeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AddressFreezeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFreezeAll(ctx, req.(*QueryAllAddressFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Freeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Freeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Freeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Freeze(ctx, req.(*QueryGetFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FreezeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FreezeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/FreezeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FreezeAll(ctx, req.(*QueryAllFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Coins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Coins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Coins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Coins(ctx, req.(*QueryGetCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/CoinsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinsAll(ctx, req.(*QueryAllCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllowanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AllowanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowanceList(ctx, req.(*QueryGetAllowanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowanceListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllowanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowanceListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AllowanceListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowanceListAll(ctx, req.(*QueryAllAllowanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Allowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Allowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Allowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Allowance(ctx, req.(*QueryGetAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AllowanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowanceAll(ctx, req.(*QueryAllAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Address(ctx, req.(*QueryGetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konstellation.issue.Query/AddressAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressAll(ctx, req.(*QueryAllAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "konstellation.issue.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CoinIssueDenoms",
			Handler:    _Query_CoinIssueDenoms_Handler,
		},
		{
			MethodName: "CoinIssueDenomsAll",
			Handler:    _Query_CoinIssueDenomsAll_Handler,
		},
		{
			MethodName: "CoinIssueList",
			Handler:    _Query_CoinIssueList_Handler,
		},
		{
			MethodName: "CoinIssueListAll",
			Handler:    _Query_CoinIssueListAll_Handler,
		},
		{
			MethodName: "IssuesParams",
			Handler:    _Query_IssuesParams_Handler,
		},
		{
			MethodName: "IssuesParamsAll",
			Handler:    _Query_IssuesParamsAll_Handler,
		},
		{
			MethodName: "IssueParams",
			Handler:    _Query_IssueParams_Handler,
		},
		{
			MethodName: "IssueParamsAll",
			Handler:    _Query_IssueParamsAll_Handler,
		},
		{
			MethodName: "IssueFeatures",
			Handler:    _Query_IssueFeatures_Handler,
		},
		{
			MethodName: "IssueFeaturesAll",
			Handler:    _Query_IssueFeaturesAll_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ParamsAll",
			Handler:    _Query_ParamsAll_Handler,
		},
		{
			MethodName: "Issues",
			Handler:    _Query_Issues_Handler,
		},
		{
			MethodName: "IssuesAll",
			Handler:    _Query_IssuesAll_Handler,
		},
		{
			MethodName: "CoinIssueDenom",
			Handler:    _Query_CoinIssueDenom_Handler,
		},
		{
			MethodName: "CoinIssueDenomAll",
			Handler:    _Query_CoinIssueDenomAll_Handler,
		},
		{
			MethodName: "CoinIssue",
			Handler:    _Query_CoinIssue_Handler,
		},
		{
			MethodName: "CoinIssueAll",
			Handler:    _Query_CoinIssueAll_Handler,
		},
		{
			MethodName: "AddressFreezeList",
			Handler:    _Query_AddressFreezeList_Handler,
		},
		{
			MethodName: "AddressFreezeListAll",
			Handler:    _Query_AddressFreezeListAll_Handler,
		},
		{
			MethodName: "AddressFreeze",
			Handler:    _Query_AddressFreeze_Handler,
		},
		{
			MethodName: "AddressFreezeAll",
			Handler:    _Query_AddressFreezeAll_Handler,
		},
		{
			MethodName: "Freeze",
			Handler:    _Query_Freeze_Handler,
		},
		{
			MethodName: "FreezeAll",
			Handler:    _Query_FreezeAll_Handler,
		},
		{
			MethodName: "Coins",
			Handler:    _Query_Coins_Handler,
		},
		{
			MethodName: "CoinsAll",
			Handler:    _Query_CoinsAll_Handler,
		},
		{
			MethodName: "AllowanceList",
			Handler:    _Query_AllowanceList_Handler,
		},
		{
			MethodName: "AllowanceListAll",
			Handler:    _Query_AllowanceListAll_Handler,
		},
		{
			MethodName: "Allowance",
			Handler:    _Query_Allowance_Handler,
		},
		{
			MethodName: "AllowanceAll",
			Handler:    _Query_AllowanceAll_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _Query_Address_Handler,
		},
		{
			MethodName: "AddressAll",
			Handler:    _Query_AddressAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issue/query.proto",
}

func (m *QueryGetCoinIssueDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinIssueDenoms != nil {
		{
			size, err := m.CoinIssueDenoms.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoinIssueDenoms) > 0 {
		for iNdEx := len(m.CoinIssueDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssueDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinIssueList != nil {
		{
			size, err := m.CoinIssueList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoinIssueList) > 0 {
		for iNdEx := len(m.CoinIssueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuesParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuesParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuesParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuesParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuesParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuesParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssuesParams != nil {
		{
			size, err := m.IssuesParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuesParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuesParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuesParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuesParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuesParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuesParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuesParams) > 0 {
		for iNdEx := len(m.IssuesParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssuesParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueParams != nil {
		{
			size, err := m.IssueParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssueParams) > 0 {
		for iNdEx := len(m.IssueParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueFeatures != nil {
		{
			size, err := m.IssueFeatures.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssueFeatures) > 0 {
		for iNdEx := len(m.IssueFeatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueFeatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Params) > 0 {
		for iNdEx := len(m.Params) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Params[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Issues != nil {
		{
			size, err := m.Issues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issues) > 0 {
		for iNdEx := len(m.Issues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinIssueDenom != nil {
		{
			size, err := m.CoinIssueDenom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoinIssueDenom) > 0 {
		for iNdEx := len(m.CoinIssueDenom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssueDenom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinIssueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinIssueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinIssueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinIssue != nil {
		{
			size, err := m.CoinIssue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinIssueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinIssueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinIssueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoinIssue) > 0 {
		for iNdEx := len(m.CoinIssue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressFreezeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressFreezeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressFreezeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressFreezeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressFreezeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressFreezeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressFreezeList != nil {
		{
			size, err := m.AddressFreezeList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressFreezeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressFreezeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressFreezeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressFreezeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressFreezeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressFreezeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressFreezeList) > 0 {
		for iNdEx := len(m.AddressFreezeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressFreezeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressFreezeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressFreezeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressFreezeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressFreezeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressFreezeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressFreezeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressFreeze != nil {
		{
			size, err := m.AddressFreeze.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressFreezeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressFreezeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressFreezeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressFreezeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressFreezeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressFreezeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressFreeze) > 0 {
		for iNdEx := len(m.AddressFreeze) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddressFreeze[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFreezeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFreezeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFreezeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFreezeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFreezeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFreezeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Freeze != nil {
		{
			size, err := m.Freeze.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFreezeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFreezeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFreezeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFreezeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFreezeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFreezeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Freeze) > 0 {
		for iNdEx := len(m.Freeze) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Freeze[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coins != nil {
		{
			size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowanceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowanceListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowanceListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowanceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowanceListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowanceListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowanceList != nil {
		{
			size, err := m.AllowanceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowanceListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowanceListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowanceListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowanceListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowanceListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowanceListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllowanceList) > 0 {
		for iNdEx := len(m.AllowanceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowanceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Spender) > 0 {
		i -= len(m.Spender)
		copy(dAtA[i:], m.Spender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Spender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allowance != nil {
		{
			size, err := m.Allowance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Allowance) > 0 {
		for iNdEx := len(m.Allowance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allowance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetCoinIssueDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCoinIssueDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinIssueDenoms != nil {
		l = m.CoinIssueDenoms.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssueDenoms) > 0 {
		for _, e := range m.CoinIssueDenoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoinIssueListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCoinIssueListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinIssueList != nil {
		l = m.CoinIssueList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssueList) > 0 {
		for _, e := range m.CoinIssueList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssuesParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIssuesParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuesParams != nil {
		l = m.IssuesParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuesParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuesParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IssuesParams) > 0 {
		for _, e := range m.IssuesParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssueParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIssueParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueParams != nil {
		l = m.IssueParams.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IssueParams) > 0 {
		for _, e := range m.IssueParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssueFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIssueFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueFeatures != nil {
		l = m.IssueFeatures.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IssueFeatures) > 0 {
		for _, e := range m.IssueFeatures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for _, e := range m.Params {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetIssuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Issues != nil {
		l = m.Issues.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issues) > 0 {
		for _, e := range m.Issues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoinIssueDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCoinIssueDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinIssueDenom != nil {
		l = m.CoinIssueDenom.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssueDenom) > 0 {
		for _, e := range m.CoinIssueDenom {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoinIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoinIssueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinIssue != nil {
		l = m.CoinIssue.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinIssueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssue) > 0 {
		for _, e := range m.CoinIssue {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressFreezeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAddressFreezeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressFreezeList != nil {
		l = m.AddressFreezeList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressFreezeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressFreezeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressFreezeList) > 0 {
		for _, e := range m.AddressFreezeList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressFreezeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAddressFreezeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressFreeze != nil {
		l = m.AddressFreeze.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressFreezeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressFreezeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AddressFreeze) > 0 {
		for _, e := range m.AddressFreeze {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFreezeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFreezeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Freeze != nil {
		l = m.Freeze.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFreezeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFreezeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Freeze) > 0 {
		for _, e := range m.Freeze {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coins != nil {
		l = m.Coins.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllowanceListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAllowanceListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowanceList != nil {
		l = m.AllowanceList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowanceListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowanceListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowanceList) > 0 {
		for _, e := range m.AllowanceList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllowanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Spender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allowance != nil {
		l = m.Allowance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allowance) > 0 {
		for _, e := range m.Allowance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetCoinIssueDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinIssueDenoms == nil {
				m.CoinIssueDenoms = &CoinIssueDenoms{}
			}
			if err := m.CoinIssueDenoms.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssueDenoms = append(m.CoinIssueDenoms, &CoinIssueDenoms{})
			if err := m.CoinIssueDenoms[len(m.CoinIssueDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinIssueList == nil {
				m.CoinIssueList = &CoinIssueList{}
			}
			if err := m.CoinIssueList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssueList = append(m.CoinIssueList, &CoinIssueList{})
			if err := m.CoinIssueList[len(m.CoinIssueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuesParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuesParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuesParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuesParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuesParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuesParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuesParams == nil {
				m.IssuesParams = &IssuesParams{}
			}
			if err := m.IssuesParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuesParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuesParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuesParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &IssuesParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuesParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuesParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuesParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuesParams = append(m.IssuesParams, &IssuesParams{})
			if err := m.IssuesParams[len(m.IssuesParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueParams == nil {
				m.IssueParams = &IssueParams{}
			}
			if err := m.IssueParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueParams = append(m.IssueParams, &IssueParams{})
			if err := m.IssueParams[len(m.IssueParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueFeatures == nil {
				m.IssueFeatures = &IssueFeatures{}
			}
			if err := m.IssueFeatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueFeatures = append(m.IssueFeatures, &IssueFeatures{})
			if err := m.IssueFeatures[len(m.IssueFeatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, &Params{})
			if err := m.Params[len(m.Params)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issues == nil {
				m.Issues = &Issues{}
			}
			if err := m.Issues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = append(m.Issues, &Issues{})
			if err := m.Issues[len(m.Issues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinIssueDenom == nil {
				m.CoinIssueDenom = &CoinIssueDenom{}
			}
			if err := m.CoinIssueDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssueDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssueDenom = append(m.CoinIssueDenom, &CoinIssueDenom{})
			if err := m.CoinIssueDenom[len(m.CoinIssueDenom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinIssueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinIssueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinIssueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinIssue == nil {
				m.CoinIssue = &CoinIssue{}
			}
			if err := m.CoinIssue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinIssueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinIssueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinIssueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssue = append(m.CoinIssue, &CoinIssue{})
			if err := m.CoinIssue[len(m.CoinIssue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressFreezeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressFreezeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressFreezeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressFreezeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressFreezeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressFreezeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFreezeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressFreezeList == nil {
				m.AddressFreezeList = &AddressFreezeList{}
			}
			if err := m.AddressFreezeList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressFreezeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressFreezeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressFreezeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressFreezeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressFreezeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressFreezeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFreezeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFreezeList = append(m.AddressFreezeList, &AddressFreezeList{})
			if err := m.AddressFreezeList[len(m.AddressFreezeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressFreezeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressFreezeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressFreezeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressFreezeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressFreezeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressFreezeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFreeze", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressFreeze == nil {
				m.AddressFreeze = &AddressFreeze{}
			}
			if err := m.AddressFreeze.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressFreezeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressFreezeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressFreezeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressFreezeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressFreezeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressFreezeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFreeze", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFreeze = append(m.AddressFreeze, &AddressFreeze{})
			if err := m.AddressFreeze[len(m.AddressFreeze)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFreezeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFreezeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFreezeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFreezeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFreezeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFreezeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freeze", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Freeze == nil {
				m.Freeze = &Freeze{}
			}
			if err := m.Freeze.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFreezeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFreezeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFreezeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFreezeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFreezeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFreezeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freeze", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Freeze = append(m.Freeze, &Freeze{})
			if err := m.Freeze[len(m.Freeze)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coins == nil {
				m.Coins = &Coins{}
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, &Coins{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowanceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowanceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowanceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowanceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowanceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowanceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowanceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowanceList == nil {
				m.AllowanceList = &AllowanceList{}
			}
			if err := m.AllowanceList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowanceListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowanceListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowanceListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowanceListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowanceListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowanceListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowanceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowanceList = append(m.AllowanceList, &AllowanceList{})
			if err := m.AllowanceList[len(m.AllowanceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allowance == nil {
				m.Allowance = &Allowance{}
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allowance = append(m.Allowance, &Allowance{})
			if err := m.Allowance[len(m.Allowance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &Address{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
