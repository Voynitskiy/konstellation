// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue/issue_features.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IssueFeatures struct {
	BurnOwnerDisabled  bool   `protobuf:"varint,1,opt,name=burn_owner_disabled,json=burnOwnerDisabled,proto3" json:"burn_owner_disabled,omitempty"`
	BurnHolderDisabled bool   `protobuf:"varint,2,opt,name=burn_holder_disabled,json=burnHolderDisabled,proto3" json:"burn_holder_disabled,omitempty"`
	BurnFromDisabled   bool   `protobuf:"varint,3,opt,name=burn_from_disabled,json=burnFromDisabled,proto3" json:"burn_from_disabled,omitempty"`
	MintDisabled       bool   `protobuf:"varint,4,opt,name=mint_disabled,json=mintDisabled,proto3" json:"mint_disabled,omitempty"`
	FreezeDisabled     bool   `protobuf:"varint,5,opt,name=freeze_disabled,json=freezeDisabled,proto3" json:"freeze_disabled,omitempty"`
	Id                 uint64 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *IssueFeatures) Reset()         { *m = IssueFeatures{} }
func (m *IssueFeatures) String() string { return proto.CompactTextString(m) }
func (*IssueFeatures) ProtoMessage()    {}
func (*IssueFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8ae1099e4b9578b, []int{0}
}
func (m *IssueFeatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueFeatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueFeatures.Merge(m, src)
}
func (m *IssueFeatures) XXX_Size() int {
	return m.Size()
}
func (m *IssueFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_IssueFeatures proto.InternalMessageInfo

func (m *IssueFeatures) GetBurnOwnerDisabled() bool {
	if m != nil {
		return m.BurnOwnerDisabled
	}
	return false
}

func (m *IssueFeatures) GetBurnHolderDisabled() bool {
	if m != nil {
		return m.BurnHolderDisabled
	}
	return false
}

func (m *IssueFeatures) GetBurnFromDisabled() bool {
	if m != nil {
		return m.BurnFromDisabled
	}
	return false
}

func (m *IssueFeatures) GetMintDisabled() bool {
	if m != nil {
		return m.MintDisabled
	}
	return false
}

func (m *IssueFeatures) GetFreezeDisabled() bool {
	if m != nil {
		return m.FreezeDisabled
	}
	return false
}

func (m *IssueFeatures) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*IssueFeatures)(nil), "konstellation.issue.IssueFeatures")
}

func init() { proto.RegisterFile("issue/issue_features.proto", fileDescriptor_b8ae1099e4b9578b) }

var fileDescriptor_b8ae1099e4b9578b = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x2c, 0x2e, 0x2e,
	0x4d, 0xd5, 0x07, 0x93, 0xf1, 0x69, 0xa9, 0x89, 0x25, 0xa5, 0x45, 0xa9, 0xc5, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0xc2, 0xd9, 0xf9, 0x79, 0xc5, 0x25, 0xa9, 0x39, 0x39, 0x89, 0x25, 0x99,
	0xf9, 0x79, 0x7a, 0x60, 0x35, 0x4a, 0x7f, 0x19, 0xb9, 0x78, 0x3d, 0x41, 0x2c, 0x37, 0xa8, 0x62,
	0x21, 0x3d, 0x2e, 0xe1, 0xa4, 0xd2, 0xa2, 0xbc, 0xf8, 0xfc, 0xf2, 0xbc, 0xd4, 0xa2, 0xf8, 0x94,
	0xcc, 0xe2, 0xc4, 0xa4, 0x9c, 0xd4, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x41, 0x90,
	0x94, 0x3f, 0x48, 0xc6, 0x05, 0x2a, 0x21, 0x64, 0xc0, 0x25, 0x02, 0x56, 0x9f, 0x91, 0x9f, 0x93,
	0x82, 0xac, 0x81, 0x09, 0xac, 0x41, 0x08, 0x24, 0xe7, 0x01, 0x96, 0x82, 0xeb, 0xd0, 0xe1, 0x02,
	0x8b, 0xc6, 0xa7, 0x15, 0xe5, 0xe7, 0x22, 0xd4, 0x33, 0x83, 0xd5, 0x0b, 0x80, 0x64, 0xdc, 0x8a,
	0xf2, 0x73, 0xe1, 0xaa, 0x95, 0xb9, 0x78, 0x73, 0x33, 0xf3, 0x4a, 0x10, 0x0a, 0x59, 0xc0, 0x0a,
	0x79, 0x40, 0x82, 0x70, 0x45, 0xea, 0x5c, 0xfc, 0x69, 0x45, 0xa9, 0xa9, 0x55, 0xa9, 0x08, 0x65,
	0xac, 0x60, 0x65, 0x7c, 0x10, 0x61, 0xb8, 0x42, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x36, 0x05,
	0x46, 0x0d, 0x96, 0x20, 0xa6, 0xcc, 0x14, 0x27, 0xf5, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c,
	0x96, 0x63, 0x88, 0xe2, 0xad, 0x80, 0x04, 0xa3, 0x7e, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b,
	0x38, 0x10, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x19, 0x13, 0x85, 0x62, 0x01, 0x00,
	0x00,
}

func (m *IssueFeatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueFeatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueFeatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintIssueFeatures(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.FreezeDisabled {
		i--
		if m.FreezeDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MintDisabled {
		i--
		if m.MintDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BurnFromDisabled {
		i--
		if m.BurnFromDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BurnHolderDisabled {
		i--
		if m.BurnHolderDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BurnOwnerDisabled {
		i--
		if m.BurnOwnerDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssueFeatures(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssueFeatures(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IssueFeatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BurnOwnerDisabled {
		n += 2
	}
	if m.BurnHolderDisabled {
		n += 2
	}
	if m.BurnFromDisabled {
		n += 2
	}
	if m.MintDisabled {
		n += 2
	}
	if m.FreezeDisabled {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovIssueFeatures(uint64(m.Id))
	}
	return n
}

func sovIssueFeatures(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssueFeatures(x uint64) (n int) {
	return sovIssueFeatures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IssueFeatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssueFeatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueFeatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueFeatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnOwnerDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnOwnerDisabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnHolderDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnHolderDisabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFromDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnFromDisabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintDisabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreezeDisabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIssueFeatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssueFeatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssueFeatures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssueFeatures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssueFeatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssueFeatures
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssueFeatures
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssueFeatures
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssueFeatures        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssueFeatures          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssueFeatures = fmt.Errorf("proto: unexpected end of group")
)
