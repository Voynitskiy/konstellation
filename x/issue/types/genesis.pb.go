// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the issue module's genesis state.
type GenesisState struct {
	//
	//// this line is used by starport scaffolding # genesis/proto/state
	//repeated CoinIssueDenoms coinIssueDenomsList = 31; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 coinIssueDenomsCount = 32; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated CoinIssueList coinIssueListList = 29; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 coinIssueListCount = 30; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated IssuesParams issuesParamsList = 27; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 issuesParamsCount = 28; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated IssueParams issueParamsList = 25; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 issueParamsCount = 26; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated IssueFeatures issueFeaturesList = 23; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 issueFeaturesCount = 24; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Params paramsList = 21; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 paramsCount = 22; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Issues issuesList = 19; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 issuesCount = 20; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated CoinIssueDenom coinIssueDenomList = 17; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 coinIssueDenomCount = 18; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated CoinIssue coinIssueList = 15; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 coinIssueCount = 16; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated AddressFreezeList addressFreezeListList = 13; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 addressFreezeListCount = 14; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated AddressFreeze addressFreezeList = 11; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 addressFreezeCount = 12; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Freeze freezeList = 9; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 freezeCount = 10; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Coins coinsList = 7; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 coinsCount = 8; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated AllowanceList allowanceListList = 5; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 allowanceListCount = 6; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Allowance allowanceList = 3; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 allowanceCount = 4; // this line is used by starport scaffolding # genesis/proto/stateField
	//repeated Address addressList = 1; // this line is used by starport scaffolding # genesis/proto/stateField
	//uint64 addressCount = 2; // this line is used by starport scaffolding # genesis/proto/stateField
	//// this line is used by starport scaffolding # ibc/genesis/proto
	StartingIssueId uint64  `protobuf:"varint,1,opt,name=starting_issue_id,json=startingIssueId,proto3" json:"starting_issue_id,omitempty"`
	Issues          *Issues `protobuf:"bytes,2,opt,name=issues,proto3" json:"issues,omitempty"`
	Params          Params  `protobuf:"bytes,3,opt,name=params,proto3,customtype=Params" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_49806cc97d6788d6, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetStartingIssueId() uint64 {
	if m != nil {
		return m.StartingIssueId
	}
	return 0
}

func (m *GenesisState) GetIssues() *Issues {
	if m != nil {
		return m.Issues
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "konstellation.issue.GenesisState")
}

func init() { proto.RegisterFile("issue/genesis.proto", fileDescriptor_49806cc97d6788d6) }

var fileDescriptor_49806cc97d6788d6 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x2c, 0x2e, 0x2e,
	0x4d, 0xd5, 0x4f, 0x4f, 0xcd, 0x4b, 0x2d, 0xce, 0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0xce, 0xce, 0xcf, 0x2b, 0x2e, 0x49, 0xcd, 0xc9, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03,
	0x2b, 0x91, 0x12, 0x82, 0xa8, 0x04, 0x93, 0x50, 0x85, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60,
	0xa6, 0x3e, 0x88, 0x05, 0x11, 0x55, 0x9a, 0xce, 0xc8, 0xc5, 0xe3, 0x0e, 0x31, 0x30, 0xb8, 0x24,
	0xb1, 0x24, 0x55, 0x48, 0x8b, 0x4b, 0xb0, 0xb8, 0x24, 0xb1, 0xa8, 0x24, 0x33, 0x2f, 0x3d, 0x1e,
	0xac, 0x3f, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25, 0x88, 0x1f, 0x26, 0xe1, 0x09,
	0x12, 0xf7, 0x4c, 0x11, 0x32, 0xe6, 0x62, 0x83, 0x58, 0x21, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x6d,
	0x24, 0xad, 0x87, 0xc5, 0x31, 0x7a, 0x60, 0xd5, 0xc5, 0x41, 0x50, 0xa5, 0x42, 0x6a, 0x5c, 0x6c,
	0x05, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x7c, 0x27, 0xee,
	0xc9, 0x33, 0xdc, 0xba, 0x27, 0xcf, 0x16, 0x00, 0x16, 0x0d, 0x82, 0xca, 0x3a, 0xa9, 0x9f, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x6f, 0x05, 0xc4, 0x67, 0xfa, 0x25, 0x95,
	0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x9f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x20,
	0x01, 0x50, 0x1f, 0x01, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Params.Size()
		i -= size
		if _, err := m.Params.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Issues != nil {
		{
			size, err := m.Issues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartingIssueId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StartingIssueId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartingIssueId != 0 {
		n += 1 + sovGenesis(uint64(m.StartingIssueId))
	}
	if m.Issues != nil {
		l = m.Issues.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingIssueId", wireType)
			}
			m.StartingIssueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingIssueId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issues == nil {
				m.Issues = &Issues{}
			}
			if err := m.Issues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
