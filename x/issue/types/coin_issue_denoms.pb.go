// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue/coin_issue_denoms.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CoinIssueDenoms struct {
	Denoms []*CoinIssueDenom `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
	Id     uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CoinIssueDenoms) Reset()         { *m = CoinIssueDenoms{} }
func (m *CoinIssueDenoms) String() string { return proto.CompactTextString(m) }
func (*CoinIssueDenoms) ProtoMessage()    {}
func (*CoinIssueDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_0396a36e06b6c3c4, []int{0}
}
func (m *CoinIssueDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssueDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssueDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssueDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssueDenoms.Merge(m, src)
}
func (m *CoinIssueDenoms) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssueDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssueDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssueDenoms proto.InternalMessageInfo

func (m *CoinIssueDenoms) GetDenoms() []*CoinIssueDenom {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *CoinIssueDenoms) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*CoinIssueDenoms)(nil), "konstellation.issue.CoinIssueDenoms")
}

func init() { proto.RegisterFile("issue/coin_issue_denoms.proto", fileDescriptor_0396a36e06b6c3c4) }

var fileDescriptor_0396a36e06b6c3c4 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0x2c, 0x2e, 0x2e,
	0x4d, 0xd5, 0x4f, 0xce, 0xcf, 0xcc, 0x8b, 0x07, 0x33, 0xe3, 0x53, 0x52, 0xf3, 0xf2, 0x73, 0x8b,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xb3, 0xf3, 0xf3, 0x8a, 0x4b, 0x52, 0x73, 0x72,
	0x12, 0x4b, 0x32, 0xf3, 0xf3, 0xf4, 0xc0, 0x2a, 0xa4, 0x64, 0xb0, 0xeb, 0x81, 0x68, 0x51, 0x8a,
	0xe3, 0xe2, 0x77, 0xce, 0xcf, 0xcc, 0xf3, 0x04, 0x49, 0xb8, 0x80, 0xcd, 0x12, 0xb2, 0xe6, 0x62,
	0x83, 0x98, 0x2a, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xac, 0x87, 0xc5, 0x58, 0x3d, 0x54,
	0x5d, 0x41, 0x50, 0x2d, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c,
	0x41, 0x4c, 0x99, 0x29, 0x4e, 0xea, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10,
	0xc5, 0x5b, 0xa1, 0x0f, 0x71, 0x59, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8, 0x3d, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0xbb, 0x46, 0x48, 0xe3, 0x00, 0x00, 0x00,
}

func (m *CoinIssueDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssueDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssueDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintCoinIssueDenoms(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCoinIssueDenoms(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoinIssueDenoms(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoinIssueDenoms(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinIssueDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovCoinIssueDenoms(uint64(l))
		}
	}
	if m.Id != 0 {
		n += 1 + sovCoinIssueDenoms(uint64(m.Id))
	}
	return n
}

func sovCoinIssueDenoms(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoinIssueDenoms(x uint64) (n int) {
	return sovCoinIssueDenoms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinIssueDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoinIssueDenoms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssueDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssueDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinIssueDenoms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoinIssueDenoms
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoinIssueDenoms
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &CoinIssueDenom{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoinIssueDenoms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoinIssueDenoms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoinIssueDenoms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoinIssueDenoms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoinIssueDenoms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinIssueDenoms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoinIssueDenoms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoinIssueDenoms
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoinIssueDenoms
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoinIssueDenoms
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoinIssueDenoms        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoinIssueDenoms          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoinIssueDenoms = fmt.Errorf("proto: unexpected end of group")
)
