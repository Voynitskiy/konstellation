// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: konstellation/issue/issue.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CoinIssueList struct {
	CoinIssues []*CoinIssue `protobuf:"bytes,1,rep,name=coin_issues,json=coinIssues,proto3" json:"coin_issues,omitempty"`
}

func (m *CoinIssueList) Reset()         { *m = CoinIssueList{} }
func (m *CoinIssueList) String() string { return proto.CompactTextString(m) }
func (*CoinIssueList) ProtoMessage()    {}
func (*CoinIssueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_223b053164deef86, []int{0}
}
func (m *CoinIssueList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssueList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssueList.Merge(m, src)
}
func (m *CoinIssueList) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssueList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssueList.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssueList proto.InternalMessageInfo

func (m *CoinIssueList) GetCoinIssues() []*CoinIssue {
	if m != nil {
		return m.CoinIssues
	}
	return nil
}

type CoinIssue struct {
	Id                 uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Issuer             string                                 `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty" yaml:"issuer"`
	Owner              string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Denom              string                                 `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	Symbol             string                                 `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalSupply        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_supply,json=totalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_supply"`
	Decimals           uint32                                 `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Description        string                                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	IssueTime          int64                                  `protobuf:"varint,9,opt,name=issue_time,json=issueTime,proto3" json:"issue_time,omitempty"`
	BurnOwnerDisabled  bool                                   `protobuf:"varint,10,opt,name=burn_owner_disabled,json=burnOwnerDisabled,proto3" json:"burn_owner_disabled,omitempty"`
	BurnHolderDisabled bool                                   `protobuf:"varint,11,opt,name=burn_holder_disabled,json=burnHolderDisabled,proto3" json:"burn_holder_disabled,omitempty"`
	BurnFromDisabled   bool                                   `protobuf:"varint,12,opt,name=burn_from_disabled,json=burnFromDisabled,proto3" json:"burn_from_disabled,omitempty"`
	FreezeDisabled     bool                                   `protobuf:"varint,13,opt,name=freeze_disabled,json=freezeDisabled,proto3" json:"freeze_disabled,omitempty"`
	MintDisabled       bool                                   `protobuf:"varint,14,opt,name=mint_disabled,json=mintDisabled,proto3" json:"mint_disabled,omitempty"`
}

func (m *CoinIssue) Reset()         { *m = CoinIssue{} }
func (m *CoinIssue) String() string { return proto.CompactTextString(m) }
func (*CoinIssue) ProtoMessage()    {}
func (*CoinIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_223b053164deef86, []int{1}
}
func (m *CoinIssue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssue.Merge(m, src)
}
func (m *CoinIssue) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssue.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssue proto.InternalMessageInfo

func (m *CoinIssue) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoinIssue) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CoinIssue) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CoinIssue) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CoinIssue) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *CoinIssue) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *CoinIssue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CoinIssue) GetIssueTime() int64 {
	if m != nil {
		return m.IssueTime
	}
	return 0
}

func (m *CoinIssue) GetBurnOwnerDisabled() bool {
	if m != nil {
		return m.BurnOwnerDisabled
	}
	return false
}

func (m *CoinIssue) GetBurnHolderDisabled() bool {
	if m != nil {
		return m.BurnHolderDisabled
	}
	return false
}

func (m *CoinIssue) GetBurnFromDisabled() bool {
	if m != nil {
		return m.BurnFromDisabled
	}
	return false
}

func (m *CoinIssue) GetFreezeDisabled() bool {
	if m != nil {
		return m.FreezeDisabled
	}
	return false
}

func (m *CoinIssue) GetMintDisabled() bool {
	if m != nil {
		return m.MintDisabled
	}
	return false
}

type CoinIssueDenoms struct {
	Denoms []*CoinIssueDenom `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *CoinIssueDenoms) Reset()         { *m = CoinIssueDenoms{} }
func (m *CoinIssueDenoms) String() string { return proto.CompactTextString(m) }
func (*CoinIssueDenoms) ProtoMessage()    {}
func (*CoinIssueDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_223b053164deef86, []int{2}
}
func (m *CoinIssueDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssueDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssueDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssueDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssueDenoms.Merge(m, src)
}
func (m *CoinIssueDenoms) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssueDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssueDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssueDenoms proto.InternalMessageInfo

func (m *CoinIssueDenoms) GetDenoms() []*CoinIssueDenom {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type CoinIssueDenom struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *CoinIssueDenom) Reset()         { *m = CoinIssueDenom{} }
func (m *CoinIssueDenom) String() string { return proto.CompactTextString(m) }
func (*CoinIssueDenom) ProtoMessage()    {}
func (*CoinIssueDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_223b053164deef86, []int{3}
}
func (m *CoinIssueDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssueDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssueDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssueDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssueDenom.Merge(m, src)
}
func (m *CoinIssueDenom) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssueDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssueDenom.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssueDenom proto.InternalMessageInfo

func (m *CoinIssueDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*CoinIssueList)(nil), "konstellation.issue.CoinIssueList")
	proto.RegisterType((*CoinIssue)(nil), "konstellation.issue.CoinIssue")
	proto.RegisterType((*CoinIssueDenoms)(nil), "konstellation.issue.CoinIssueDenoms")
	proto.RegisterType((*CoinIssueDenom)(nil), "konstellation.issue.CoinIssueDenom")
}

func init() { proto.RegisterFile("konstellation/issue/issue.proto", fileDescriptor_223b053164deef86) }

var fileDescriptor_223b053164deef86 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xe3, 0xfc, 0x91, 0xdc, 0xc4, 0x69, 0x3b, 0x8d, 0xd0, 0xa8, 0x12, 0x8e, 0xe5, 0x4a,
	0xa9, 0x91, 0xc0, 0x41, 0xb0, 0x83, 0x05, 0x52, 0xa9, 0x10, 0x95, 0x10, 0x3f, 0x86, 0x15, 0x1b,
	0x2b, 0xb1, 0xa7, 0xe9, 0xa8, 0x1e, 0x4f, 0xe4, 0x99, 0x08, 0xc2, 0x53, 0xf0, 0x1c, 0x3c, 0x49,
	0x97, 0x5d, 0x22, 0x16, 0x11, 0x4a, 0xde, 0xa0, 0x4f, 0x80, 0x7c, 0xed, 0x38, 0xa9, 0x84, 0xd8,
	0xd8, 0x33, 0xe7, 0x7c, 0xe7, 0xca, 0xe3, 0x7b, 0x07, 0x06, 0x57, 0x32, 0x51, 0x9a, 0xc5, 0xf1,
	0x58, 0x73, 0x99, 0x8c, 0xb8, 0x52, 0x73, 0x96, 0x3f, 0xbd, 0x59, 0x2a, 0xb5, 0x24, 0x87, 0x77,
	0x00, 0x0f, 0xad, 0xa3, 0xfe, 0x54, 0x4e, 0x25, 0xfa, 0xa3, 0x6c, 0x95, 0xa3, 0xce, 0x07, 0x30,
	0x5f, 0x49, 0x9e, 0x9c, 0x67, 0xc8, 0x5b, 0xae, 0x34, 0x79, 0x09, 0x9d, 0x50, 0xf2, 0x24, 0xc0,
	0x90, 0xa2, 0x86, 0x5d, 0x73, 0x3b, 0x4f, 0x2d, 0xef, 0x1f, 0x15, 0xbd, 0x32, 0xe8, 0x43, 0xb8,
	0x59, 0x2a, 0xe7, 0x67, 0x1d, 0xda, 0xa5, 0x43, 0x7a, 0x50, 0xe5, 0x11, 0x35, 0x6c, 0xc3, 0xad,
	0xfb, 0x55, 0x1e, 0x91, 0x87, 0xd0, 0xc4, 0x70, 0x4a, 0xab, 0xb6, 0xe1, 0xb6, 0x4f, 0x0f, 0x6e,
	0x97, 0x03, 0x73, 0x31, 0x16, 0xf1, 0x73, 0x27, 0xd7, 0x1d, 0xbf, 0x00, 0xc8, 0x10, 0x1a, 0xf2,
	0x6b, 0xc2, 0x52, 0x5a, 0x43, 0x72, 0xff, 0x76, 0x39, 0xe8, 0xe6, 0x24, 0xca, 0x8e, 0x9f, 0xdb,
	0xa4, 0x0f, 0x8d, 0x88, 0x25, 0x52, 0xd0, 0x7a, 0xc6, 0xf9, 0xf9, 0x86, 0xdc, 0x87, 0xa6, 0x5a,
	0x88, 0x89, 0x8c, 0x69, 0x03, 0xe5, 0x62, 0x47, 0x3e, 0x42, 0x57, 0x4b, 0x3d, 0x8e, 0x03, 0x35,
	0x9f, 0xcd, 0xe2, 0x05, 0x6d, 0x62, 0x71, 0xef, 0x7a, 0x39, 0xa8, 0xfc, 0x5e, 0x0e, 0x86, 0x53,
	0xae, 0x2f, 0xe7, 0x13, 0x2f, 0x94, 0x62, 0x14, 0x4a, 0x25, 0xa4, 0x2a, 0x5e, 0x8f, 0x55, 0x74,
	0x35, 0xd2, 0x8b, 0x19, 0x53, 0xde, 0x79, 0xa2, 0xfd, 0x0e, 0xd6, 0xf8, 0x84, 0x25, 0xc8, 0x11,
	0xb4, 0x22, 0x16, 0x72, 0x31, 0x8e, 0x15, 0xbd, 0x67, 0x1b, 0xae, 0xe9, 0x97, 0x7b, 0x62, 0x43,
	0x27, 0x62, 0x2a, 0x4c, 0xf9, 0x2c, 0xfb, 0x71, 0xb4, 0x85, 0xdf, 0xb2, 0x2b, 0x91, 0x07, 0x00,
	0x78, 0xe0, 0x40, 0x73, 0xc1, 0x68, 0xdb, 0x36, 0xdc, 0x9a, 0xdf, 0x46, 0xe5, 0x33, 0x17, 0x8c,
	0x78, 0x70, 0x38, 0x99, 0xa7, 0x49, 0x80, 0x67, 0x0d, 0x22, 0xae, 0xc6, 0x93, 0x98, 0x45, 0x14,
	0x6c, 0xc3, 0x6d, 0xf9, 0x07, 0x99, 0xf5, 0x3e, 0x73, 0xce, 0x0a, 0x83, 0x3c, 0x81, 0x3e, 0xf2,
	0x97, 0x32, 0x8e, 0x76, 0x03, 0x1d, 0x0c, 0x90, 0xcc, 0x7b, 0x83, 0x56, 0x99, 0x78, 0x04, 0xa8,
	0x06, 0x17, 0xa9, 0x14, 0x5b, 0xbe, 0x8b, 0xfc, 0x7e, 0xe6, 0xbc, 0x4e, 0xa5, 0x28, 0xe9, 0x13,
	0xd8, 0xbb, 0x48, 0x19, 0xfb, 0xce, 0xb6, 0xa8, 0x89, 0x68, 0x2f, 0x97, 0x4b, 0xf0, 0x18, 0x4c,
	0xc1, 0x13, 0xbd, 0xc5, 0x7a, 0x88, 0x75, 0x33, 0x71, 0x03, 0x39, 0xef, 0x60, 0xaf, 0x9c, 0x95,
	0xb3, 0xac, 0x6f, 0x8a, 0xbc, 0x80, 0x26, 0x76, 0x70, 0x33, 0x7b, 0xc7, 0xff, 0x9f, 0x3d, 0x4c,
	0xf9, 0x45, 0xc4, 0x19, 0x42, 0xef, 0xae, 0xb3, 0x9d, 0x0e, 0x63, 0x67, 0x3a, 0x4e, 0x4f, 0xae,
	0x57, 0x96, 0x71, 0xb3, 0xb2, 0x8c, 0x3f, 0x2b, 0xcb, 0xf8, 0xb1, 0xb6, 0x2a, 0x37, 0x6b, 0xab,
	0xf2, 0x6b, 0x6d, 0x55, 0xbe, 0x98, 0xdf, 0x8a, 0x0b, 0x85, 0xcd, 0x9e, 0x34, 0xf1, 0x9a, 0x3c,
	0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x69, 0x46, 0xed, 0x95, 0x74, 0x03, 0x00, 0x00,
}

func (m *CoinIssueList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssueList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssueList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinIssues) > 0 {
		for iNdEx := len(m.CoinIssues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinIssue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintDisabled {
		i--
		if m.MintDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.FreezeDisabled {
		i--
		if m.FreezeDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.BurnFromDisabled {
		i--
		if m.BurnFromDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.BurnHolderDisabled {
		i--
		if m.BurnHolderDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.BurnOwnerDisabled {
		i--
		if m.BurnOwnerDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IssueTime != 0 {
		i = encodeVarintIssue(dAtA, i, uint64(m.IssueTime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if m.Decimals != 0 {
		i = encodeVarintIssue(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIssue(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIssue(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoinIssueDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssueDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssueDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinIssueDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssueDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssueDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintIssue(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssue(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinIssueList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinIssues) > 0 {
		for _, e := range m.CoinIssues {
			l = e.Size()
			n += 1 + l + sovIssue(uint64(l))
		}
	}
	return n
}

func (m *CoinIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIssue(uint64(m.Id))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	l = m.TotalSupply.Size()
	n += 1 + l + sovIssue(uint64(l))
	if m.Decimals != 0 {
		n += 1 + sovIssue(uint64(m.Decimals))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	if m.IssueTime != 0 {
		n += 1 + sovIssue(uint64(m.IssueTime))
	}
	if m.BurnOwnerDisabled {
		n += 2
	}
	if m.BurnHolderDisabled {
		n += 2
	}
	if m.BurnFromDisabled {
		n += 2
	}
	if m.FreezeDisabled {
		n += 2
	}
	if m.MintDisabled {
		n += 2
	}
	return n
}

func (m *CoinIssueDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovIssue(uint64(l))
		}
	}
	return n
}

func (m *CoinIssueDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovIssue(uint64(l))
	}
	return n
}

func sovIssue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssue(x uint64) (n int) {
	return sovIssue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinIssueList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssueList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssueList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssues = append(m.CoinIssues, &CoinIssue{})
			if err := m.CoinIssues[len(m.CoinIssues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinIssue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTime", wireType)
			}
			m.IssueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnOwnerDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnOwnerDisabled = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnHolderDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnHolderDisabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnFromDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnFromDisabled = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreezeDisabled = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintDisabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinIssueDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssueDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssueDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &CoinIssueDenom{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinIssueDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssueDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssueDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIssue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssue = fmt.Errorf("proto: unexpected end of group")
)
