// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/exchange_rate.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExchangeRate struct {
	Pair      string                                 `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Rate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
	Denoms    []string                               `protobuf:"bytes,3,rep,name=Denoms,proto3" json:"Denoms,omitempty"`
	Height    int32                                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp time.Time                              `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *ExchangeRate) Reset()         { *m = ExchangeRate{} }
func (m *ExchangeRate) String() string { return proto.CompactTextString(m) }
func (*ExchangeRate) ProtoMessage()    {}
func (*ExchangeRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dcae02d108f9000, []int{0}
}
func (m *ExchangeRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRate.Merge(m, src)
}
func (m *ExchangeRate) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRate.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRate proto.InternalMessageInfo

func (m *ExchangeRate) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *ExchangeRate) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *ExchangeRate) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ExchangeRate) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*ExchangeRate)(nil), "konstellation.oracle.ExchangeRate")
}

func init() { proto.RegisterFile("oracle/exchange_rate.proto", fileDescriptor_7dcae02d108f9000) }

var fileDescriptor_7dcae02d108f9000 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0xfa, 0x47, 0x34, 0x20, 0x86, 0xa8, 0x42, 0x51, 0x06, 0x27, 0x62, 0x40, 0x59,
	0xb0, 0x25, 0x78, 0x83, 0xa8, 0xbc, 0x80, 0xc5, 0xc4, 0x82, 0xdc, 0x70, 0x38, 0x51, 0x93, 0x5c,
	0x14, 0xbb, 0x52, 0x79, 0x8b, 0x3e, 0x56, 0xc7, 0x8e, 0xa8, 0x43, 0x41, 0xcd, 0x8b, 0xa0, 0x38,
	0x29, 0x4c, 0xbe, 0xef, 0xf4, 0x3b, 0xdf, 0xf7, 0x9d, 0x1b, 0x60, 0x23, 0xd3, 0x02, 0x38, 0x6c,
	0xd2, 0x4c, 0x56, 0x0a, 0xde, 0x1a, 0x69, 0x80, 0xd5, 0x0d, 0x1a, 0xf4, 0xe6, 0x2b, 0xac, 0xb4,
	0x81, 0xa2, 0x90, 0x26, 0xc7, 0x8a, 0xf5, 0x64, 0x30, 0x57, 0xa8, 0xd0, 0x02, 0xbc, 0xab, 0x7a,
	0x36, 0x08, 0x15, 0xa2, 0x2a, 0x80, 0x5b, 0xb5, 0x5c, 0x7f, 0x70, 0x93, 0x97, 0xa0, 0x8d, 0x2c,
	0xeb, 0x1e, 0xb8, 0x3b, 0x10, 0xf7, 0xfa, 0x79, 0x58, 0x22, 0xa4, 0x01, 0xcf, 0x73, 0xc7, 0xb5,
	0xcc, 0x1b, 0x9f, 0x44, 0x24, 0x9e, 0x09, 0x5b, 0x7b, 0x89, 0x3b, 0xee, 0xf6, 0xfb, 0x17, 0x5d,
	0x2f, 0x61, 0xbb, 0x63, 0xe8, 0x1c, 0x8e, 0xe1, 0xbd, 0xca, 0x4d, 0xb6, 0x5e, 0xb2, 0x14, 0x4b,
	0x9e, 0xa2, 0x2e, 0x51, 0x0f, 0xcf, 0x83, 0x7e, 0x5f, 0x71, 0xf3, 0x59, 0x83, 0x66, 0x0b, 0x48,
	0x85, 0x9d, 0xf5, 0x6e, 0xdd, 0xe9, 0x02, 0x2a, 0x2c, 0xb5, 0x3f, 0x8a, 0x46, 0xf1, 0x4c, 0x0c,
	0xaa, 0xeb, 0x67, 0x90, 0xab, 0xcc, 0xf8, 0xe3, 0x88, 0xc4, 0x13, 0x31, 0x28, 0x2f, 0x71, 0x67,
	0x7f, 0x5e, 0xfd, 0x49, 0x44, 0xe2, 0xab, 0xc7, 0x80, 0xf5, 0x69, 0xd8, 0x39, 0x0d, 0x7b, 0x39,
	0x13, 0xc9, 0x65, 0x67, 0x6a, 0xfb, 0x1d, 0x12, 0xf1, 0x3f, 0x96, 0xc4, 0xbb, 0x13, 0x25, 0xfb,
	0x13, 0x25, 0x3f, 0x27, 0x4a, 0xb6, 0x2d, 0x75, 0xf6, 0x2d, 0x75, 0xbe, 0x5a, 0xea, 0xbc, 0xde,
	0x6c, 0xf8, 0x70, 0x61, 0xeb, 0x73, 0x39, 0xb5, 0x5f, 0x3e, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x32, 0x4e, 0x18, 0x78, 0x01, 0x00, 0x00,
}

func (m *ExchangeRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintExchangeRate(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if m.Height != 0 {
		i = encodeVarintExchangeRate(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintExchangeRate(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintExchangeRate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Pair) > 0 {
		i -= len(m.Pair)
		copy(dAtA[i:], m.Pair)
		i = encodeVarintExchangeRate(dAtA, i, uint64(len(m.Pair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExchangeRate(dAtA []byte, offset int, v uint64) int {
	offset -= sovExchangeRate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExchangeRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovExchangeRate(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovExchangeRate(uint64(l))
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovExchangeRate(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovExchangeRate(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovExchangeRate(uint64(l))
	return n
}

func sovExchangeRate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExchangeRate(x uint64) (n int) {
	return sovExchangeRate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExchangeRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExchangeRate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchangeRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchangeRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchangeRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchangeRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExchangeRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExchangeRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExchangeRate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExchangeRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExchangeRate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExchangeRate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExchangeRate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExchangeRate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExchangeRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExchangeRate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExchangeRate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExchangeRate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExchangeRate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExchangeRate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExchangeRate = fmt.Errorf("proto: unexpected end of group")
)
